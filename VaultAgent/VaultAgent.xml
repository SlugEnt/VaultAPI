<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VaultAgent</name>
    </assembly>
    <members>
        <member name="T:VaultAgent.AuthenticationEngines.AppRole">
            <summary>
            Represents a Vault AppRole.
            
            An "AppRole" represents a set of Vault policies and login constraints that must be met to receive a token with those policies. 
            The scope can be as narrow or broad as desired. An AppRole can be created for a particular machine, or even a particular user on that machine, 
            or a service spread across machines. The credentials required for successful login depend upon the constraints set on the AppRole associated with the credentials.
            </summary>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRole.#ctor(System.String)">
            <summary>
            Creates an AppRole object with the specified name.  Number of uses is set to unlimited AND a Secret ID is required to login.
            </summary>
            <param name="name">Name to be given to the App Role.  It will be converted to Lower Case, since Vault only deals with lower case.</param>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRole.#ctor">
            <summary>
            Creates an empty Vault AppRole object.  This should only be used by internal routines.  Callers should use the one with the name parameter.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRole.Name">
            <summary>
            The name of the App Role.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRole.IsSecretIDRequiredOnLogin">
            <summary>
            Determines whether the secret ID is required when logging in with this App Role.
            Default: True (Secret ID is required)
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRole.BoundCIDRList">
            <summary>
            Comma-separated string or list of CIDR blocks; if set, specifies blocks of IP addresses which can perform the login operation.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRole.TokenBoundCIDRList">
            <summary>
            Comma-separated string or list of CIDR blocks; if set, specifies blocks of IP addresses which can use the auth tokens generated by this role.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRole.Policies">
            <summary>
            List of policy name strings that apply to the tokens issued by this AppRole.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRole.SecretNumberOfUses">
            <summary>
             Number of times any particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. A value of zero will allow unlimited uses.
             Default: 0 (Unlimited use)
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRole.SecretTTL">
            <summary>
            Duration in either an integer number of seconds (3600) or an integer time unit (60m) after which any SecretID expires.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRole.NumberOfUses">
            <summary>
            Number of times issued tokens can be used. A value of 0 means unlimited uses.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRole.TokenTTL">
            <summary>
            Duration in either an integer number of seconds (3600) or an integer time unit (60m) to set as the TTL for issued tokens and at renewal time.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRole.TokenMaxTTL">
            <summary>
            Duration in either an integer number of seconds (3600) or an integer time unit (60m) after which the issued token can no longer be renewed.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRole.Period">
            <summary>
            Duration in either an integer number of seconds (3600) or an integer time unit (60m). 
            If set, the token generated using this AppRole is a periodic token; so long as it is renewed it never expires, 
            but the TTL set on the token at each renewal is fixed to the value specified here. 
            If this value is modified, the token will pick up the new value at its next renewal.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRole.EnableLocalSecretIDs">
            <summary>
            If set, the secret IDs generated using this role will be cluster local. This can only be set during role creation and once set, it can't be reset later.
            Defaults to False.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRole.RoleID">
            <summary>
            This property is never returned by Vault directly.  We have added this property value as it is useful within some apps to have the RoleID available with the rest
            of its contents vs storing in a separate variable somewhere.  But it is up to the calling apps to ensure they set this property correctly.
            </summary>
        </member>
        <member name="T:VaultAgent.AuthenticationEngines.AppRoleAuthEngine">
            <summary>
            The AppRoleAuthEngine represents the Vault AppRole backend authentication engine and all the service endpoints it exposes
            for the creation, updating, reading and deletion of AppRole's
            The following Vault API methods are implemented as indicated:
              ListRoles					- Fully Implemented
              Create Role				- Fully Implemented
              Read Role					- Fully Implemented
              Delete Role				- Fully Implemented
              Read RoleID				- Fully Implemented
              Update RoleID				- Fully Implemented
              Generate New Secret ID	- Fully Implemented
              List Secret ID Accesors			- Fully Implemented
              Read App Role Secret ID			- Partially Implemented - metadata functionality not working correctly.
              Destroy AppRole Secret ID			- Fully Implemented - Although there appears to be an internal Vault bug returning a 204 instead of a 404 or 400.
              Read AppRole Secret Accessor		- Not Implemented
              Destroy AppRole Secret Accessor	- Not Implemented
              Create Custom AppRole Secret ID	- Not Implemented
              Login						- Not Implemented
              Read/Update/Delete Approle Properties		- Not Implemented
            
            </summary>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.#ctor(System.String,System.String,VaultAgent.VaultAgentAPI)">
            <summary>
            Constructor for a custom AppRole authentication engine in Vault
            </summary>
            <param name="backendMountName"></param>
            <param name="backendMountPath"></param>
            <param name="vault">A VaultAgentAPI object with connection info and a Token that can be used to perform AppRoleAuth Engine functions</param>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.#ctor(VaultAgent.VaultAgentAPI)">
            <summary>
            Constructor for the default AppRole authentication backend in Vault.
            </summary>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.SaveRole(VaultAgent.AuthenticationEngines.AppRole)">
            <summary>
            Saves the specified application role.  Creating it if it does not exist, and updating otherwise.  This only returns True or False upon saving.
            </summary>
            <param name="appRole" >The AppRole Object that you wish to be created or updated in Vault.</param>
            <returns>True if successful.</returns>
            <see cref="T:VaultAgent.AuthenticationEngines.AppRole"/>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.SaveRoleAndReturnRoleObject(VaultAgent.AuthenticationEngines.AppRole)">
            <summary>
            Saves the specified application role.  Creating it if it does not exist, and updating otherwise.  Returns a new version of the passed in appRole object or Null if it encountered an issue.
            </summary>
            <param name="appRole">The Name the Application Role should be saved under or updated as.</param>
            <returns>AppRole object as read from the Vault instance.  It will contain the RoleID token value also.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.ListRoles">
            <summary>
            Lists all Application Roles.  Returns an empty list if no roles found.
            </summary>
            <returns>List[string] of role names.  Empty list if no roles found.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.ReadRole(System.String,System.Boolean)">
            <summary>
            Reads the AppRole with the given name.  Returns an AppRole object or Null if the AppRole does not exist.
            </summary>
            <param name="appRoleName">String name of the app role to retrieve.</param>
            <param name="readRoleID">If True, the method, will perform a second Read operation to get the Role ID.  By Default Vault does
            not return the RoleID.  So, if you do not need the RoleID, then leaving this false is faster and more efficient</param>
            <returns>AppRole object.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.DeleteRole(VaultAgent.AuthenticationEngines.AppRole)">
            <summary>
            Deletes the App Role from the vault.  Returns True if deleted OR did not exist.  False otherwise.
            </summary>
            <param name="appRole">AppRole object to be deleted</param>
            <returns>Bool:  True if deleted.  False otherwise</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.DeleteRole(System.String)">
            <summary>
            Deletes the AppRole with the given name.  Returns True if deleted OR did not exist.  False otherwise.
            </summary>
            <param name="appRoleName">AppRole name that should be deleted.</param>
            <returns>True if deleted OR did not exist.  False otherwise.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.ReadRoleID(System.String)">
            <summary>
            Retrieves the AppRoleID of the given AppRole.
            </summary>
            <param name="appRoleName"></param>
            <returns>Returns a string representing the Role ID as stored in Vault.  Returns RoleID as empty string if RoleID could not be found.
            VaultInvalidPathException with SpecificErrorCode = ObjectDoesNotExist, if the Role does not exist.
            </returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.UpdateAppRoleID(System.String,System.String)">
            <summary>
            Updates the AppRoleID of the given AppRole to the value specified.
            </summary>
            <param name="appRoleName"></param>
            <param name="valueOfRoleID"></param>
            <returns>True if update of RoleID was successful.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.CreateSecretID(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Generates and issues a new SecretID on an existing AppRole. 
            Similar to tokens, the response will also contain a secret_id_accessor value which can be used to read the properties of the SecretID 
            without divulging the SecretID itself, and also to delete the SecretID from the AppRole.
            Returns: AppRoleSecret representing the a secret ID Vault returned OR Null if it could not create the secret.
            </summary>
            <param name="appRoleName">Name of the AppRole to create a secret for.</param>
            <param name="metadata">Metadata to be tied to the SecretID. This should be a JSON-formatted string containing the metadata in key-value pairs. 
            This metadata will be set on tokens issued with this SecretID, and is logged in audit logs in plaintext.</param>
            <param name="cidrIPsAllowed">Comma separated string or list of CIDR blocks enforcing secret IDs to be used from specific set of IP addresses. 
            If bound_cidr_list is set on the role, then the list of CIDR blocks listed here should be a subset of the CIDR blocks listed on the role.</param>
            <returns>AppRoleSecret representing the a secret ID Vault returned.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.GenerateSecretID(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generates a secret ID for a given Application Role.
            TODO - At this time this method does not support the cidr_list or token_bound_cidrs properties that restrict the IP addresses that can use a given token.
            </summary>
            <param name="appRoleName">The name of the Application Role that you wish to generate a Secret ID For</param>
            <param name="returnFullSecret">Vault only returns an abbreviated secret object.  If you wish to have a fully populated one then set to true.  Default False.
            Note, that this in no way affects the secret itself.  By setting to true, we make an additional call to Vault to re-read the full secret object.  If you do not
            need the full secret information then leaving at false is faster.</param>
            <param name="vaultMetadata">A Vault MetaData object that should be attached to the given secret. </param>
            <returns>AppRoleSecret object.  Whether this is fully populated or contains just the ID and accessor depends upon the returnFullSecret parameter.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.ListSecretIDAccessors(System.String)">
            <summary>
            Provides a list of all the secret ID accessors that are attached to a given role.
            </summary>
            <param name="roleName">The Rolename to list the secret ID accessors for.</param>
            <returns>List of secret ID accessors for a given role.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.ReadSecretID(System.String,System.String)">
            <summary>
            Returns all the properties of a given secretID for a given role.  Returns null if the secretID could not be found.
            </summary>
            <param name="roleName">The name of the role that the secretID belongs to.</param>
            <param name="secretID">The specific secretID to retrieve information on.</param>
            <returns>The properties of the secretID</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.DeleteSecretID(System.String,System.String)">
            <summary>
            Deletes the given secretID from the Vault.  Equivalent of Vault Destroy
            </summary>
            <param name="roleName">The Role that the secret is a part of.</param>
            <param name="secretID">The SecretID to delete.</param>
            <returns>True if the secret was deleted OR if it never existed.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.Login(System.String,System.String)">
            <summary>
            Logs the given secretID into the Application Role identified by RoleID.  RoleID is always required; if bind_secret_id is enabled (the default) on the AppRole, secretID is required also.
            Returns a populated Token object if successfull.  Returns Null if it failed due to invalid Role or Secret ID
            </summary>
            <param name="roleID">Required:  The RoleID value that you wish to login to.</param>
            <param name="secretID">Optional: The secretID to use to login to the role with.</param>
            <returns>Token object that was created, that can be used to access the Vault with.  The parent token has also been set to this same token.</returns>
            TODO - Change the return type.
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleAuthEngine.RoleExists(System.String)">
            <summary>
            Determines if a role exists.
            </summary>
            <param name="roleName">Name of the application Role to check.</param>
            <returns>True if the role exists.</returns>
        </member>
        <member name="T:VaultAgent.AuthenticationEngines.AppRoleSecret">
            <summary>
            An AppRoleSercret is the Secret ID which is associated with a particular Application Role.  This class represents the information that is 
            returned from the Vault Engine when requesting the SecretID.
            </summary>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.AppRoleSecret.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRoleSecret.ID">
            <summary>
            The Secret ID value
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRoleSecret.Accessor">
            <summary>
            An accessor that can be used to access this secret ID, without the need to know the SecretID.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRoleSecret.CIDR_List">
            <summary>
            List of IP's that are allowed to access
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRoleSecret.CreationTime">
            <summary>
            When this Secret ID was created
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRoleSecret.ExpirationTime">
            <summary>
            When this secret ID expires
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRoleSecret.LastUpdatedTime">
            <summary>
            The last time this secret ID was updated
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRoleSecret.NumberOfUses">
            <summary>
            The number of uses remaining for this SecretID.  If 0, it is unlimited
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRoleSecret.SecretID_TTl">
            <summary>
            How long in seconds until this SecretId expires
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRoleSecret.TokenBoundCidrs">
            <summary>
            List of IP address blocks that can authenticate with this role ID.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.AppRoleSecret.Metadata">
            <summary>
            Additional information about this SecretID
            </summary>
        </member>
        <member name="T:VaultAgent.AuthenticationEngines.LdapAuthEngine">
             <summary>
             This is the Vault LDAP Authentication Backend.  One or more instances of this can facilitate the use of an Active Directory or LDAP
             server for authenticating users.
            
             Vault API Methods and implementation status:
               Configure LDAP						- Fully Implemented
               Read LDAP Configuration				- Fully Implemented
               List LDAP Groups						- Fully Implemented
               Read LDAP Group						- Not Implemented
               Create/Update LDAP Group				- Fully Implemented
               Delete LDAP Group						- Not Implemented
               List LDAP Users						- Fully Implemented
               Read LDAP Users						- Not Implemented
               Create/Update LDAP Users				- Not Implemented
               Delete LDAP Users						- Not Implemented
               Login									- Fully Implemented
             
             </summary>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.LdapAuthEngine.#ctor(System.String,System.String,VaultAgent.VaultAgentAPI)">
            <summary>
            Constructor for the LDAPAuthEngine, which provides a means to login via LDAP.
            </summary>
            <param name="ldapName">Name to be given to this engine</param>
            <param name="backendMountPoint">The MountPoint in Vault that this engine should mount to</param>
            <param name="vault">VaultAgentAPI object that contains connection and token information with sufficient access to allow the Engine to perform its tasks.</param>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.LdapAuthEngine.ConfigureLDAPBackend(VaultAgent.AuthenticationEngines.LDAP.LdapConfig)">
            <summary>
            Sets the configuration for the given LDAP Backend.  The configuration is everything need to setup an LDAP connection.
            </summary>
            <param name="ldapConfig">The LdapConfig object that contains all the LDAP connection information.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.LdapAuthEngine.ReadLDAPConfig">
            <summary>
            Reads the LDAP Config from the Vault that corresponds to this engine.  Returns a LdapConfig object if it can find the config.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.LdapAuthEngine.ReadLDAPConfigAsJSON">
            <summary>
            Reads the LDAP Config that corresponds to this engine.  Returns the JSON representation of the config.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.LdapAuthEngine.ListGroups">
            <summary>
            Returns a list of the LDAP groups that Vault has policies for.  Please note, this is not all the groups in the LDAP Backend.  If no
            groups found it returns an empty List.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.LdapAuthEngine.CreateGroupToPolicyMapping(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Creates a mapping between an LDAP Group name and 1 or more Vault Policies.
            Note:  Group name is converted to all lowercase per Vault standard unless CaseSensitiveNames parameter is set in the LDAP Engine Configuration.
            </summary>
            <param name="groupName">This is the name of the LDAP group as it exists in the LDAP backend.</param>
            <param name="policies">A list of Vault policies that users in this LDAP group should receive.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.LdapAuthEngine.GetPoliciesAssignedToGroup(System.String)">
            <summary>
            Retrieves all the Vault policies that have been associated with a given LDAP Group.
            <para>An empty list is is returned if the group is invalid or no policies have been assigned to it.</para>
            </summary>
            <param name="groupName">The name of the group (in lower case)</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.LdapAuthEngine.ListUsers">
            <summary>
            Returns a list of the LDAP groups that Vault has policies for.  Please note, this is not all the groups in the LDAP Backend.  If no
            groups found it returns an empty list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.LdapAuthEngine.Login(System.String,System.String)">
            <summary>
            Logs the user into the LDAP backend.
            <para>Throws a VaultInvalidaDataException if the login failed for any reason.</para>
            </summary>
            <param name="userName">The ldap user name that wants to login</param>
            <param name="password">The password for said user</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.LdapAuthEngine.GetLDAPConfigFromFile(System.String)">
            <summary>
            Returns an LDAPConfig object that was initialized from values in a config file.
            </summary>
            <param name="filename">The file that contains the LDAP configuration you wish to load</param>
            <returns></returns>
        </member>
        <member name="T:VaultAgent.AuthenticationEngines.LDAP.LdapConfig">
            <summary>
            LdapConfig is a class used to set or retrieve the Configuration of a Vault LDAP Backend.  The configuration contains
            all properties required to establish a connection to an LDAP Server to use for Authentication.
            <para>When an LDAP Config is stored in a json file, it is imperative that the DN_Suffix be the the first value if you are going to use it.</para>
            </summary>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor that build config with Vault default values, provides for ability to specify the common dn_suffix so it does not need to be specified everywhere and can automatically set some AD properties
            <param name="dn_Suffix">This value will be appended to the end of the userdn, groupdn and binddn properties. Example:  dn_suffix=dc=testcompany,dc=org</param>
            <param name="isActiveDirectoryConnector">Set to true if this LDAP config is for connecting to Active Directory.  If so, it automatically sets certain fields to their expected AD values</param>
            </summary>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.#ctor">
            <summary>
            Default constructor that creates an empty LDAP config object
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.LDAPServers">
            <summary>
            The LDAP server to connect to. Examples: ldap://ldap.myorg.com, ldaps://ldap.myorg.com:636. Multiple URLs can be
            specified with commas, e.g. ldap://ldap.myorg.com,ldap://ldap2.myorg.com; these will be tried in-order
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.BindDN">
            <summary>
            Distinguished name of object to bind when performing user search. Example: cn=vault,ou=Users,dc=example,dc=com
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.BindPassword">
            <summary>
            The password to perform the bind against.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.CaseSensitiveNames">
            <summary>
            If set, user and group names assigned to policies within the backend will be case sensitive. Otherwise, names will
            be normalized to lower case. Case will still be preserved when sending the username to the LDAP server at login time;
            this is only for matching local user/group definitions
            <para>Default is False</para>
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.Certificate">
            <summary>
            CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.DenyNullBind">
            <summary>
            This option prevents users from bypassing authentication when providing an empty password.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.DiscoverDN">
            <summary>
             Use anonymous bind to discover the bind DN of a user.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.GroupAttr">
            <summary>
             LDAP attribute to follow on objects returned by groupfilter in order to enumerate user group membership. Examples:
            for groupfilter queries returning group objects, use: cn. For queries returning user objects, use: memberOf.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.GroupDN">
            <summary>
            LDAP search base to use for group membership search. This can be the root containing either groups or users.
            <para>Example: ou=Groups,dc=example,dc=com</para>
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.GroupFilter">
            <summary>
            Go template used when constructing the group membership query. The template can access the following context
            variables: [UserDN, Username]. The default is (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}})),
            which is compatible with several common directory schemas. To support nested group resolution for Active Directory,
            instead use the following query: ( [AMPERSANd] (objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))
            <para>See the SetADGroupFilter to automatically set it to the correct value for AD.</para>
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.InsecureTLS">
            <summary>
             If true, skips LDAP server SSL certificate verification - insecure, use with caution!
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.IsActiveDirectoryConnection">
            <summary>
            True if this is an Active Directory LDAP Connection
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.StartTLS">
            <summary>
            If true, issues a StartTLS command after establishing an unencrypted connection.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.TLSMaxVersion">
            <summary>
            Maximum TLS version to use. Accepted values are tls10, tls11 or tls12
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.TLSMinVersion">
            <summary>
            Minimum TLS version to use. Accepted values are tls10, tls11 or tls12
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.Upndomain">
            <summary>
            The userPrincipalDomain used to construct the UPN string for the authenticating user. The constructed UPN will
            appear as [username]@UPNDomain. Example: example.com, which will cause vault to bind as username@example.com.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.UseTokenGroups">
            <summary>
            Unknown what this does or is used for.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.UserAttr">
            <summary>
            The Attribute to Use for UserID.  AD set to samaccountname
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.UserDN">
            <summary>
            Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com.
            <para>IF DN_Suffix has been set, then the Suffix is automatically appended to the end of the value passed in.</para>
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.DN_Suffix">
            <summary>
            This is used so that you can default the DistinguishedNames to all use the same suffix and not have to specify it each time.
            The following properties will use this if it is set.  Must be set BEFORE assigning any of the following properties
            <para>userdn</para>
            <para>groupdn</para>
            <para>binddn</para>
            </summary>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.SetActiveDirectoryDefaults">
            <summary>
            Sets Certain fields to their expected Active Directory Defaults.
            </summary>
        </member>
        <member name="P:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.UsePre111Groups">
            <summary>
            Uses Pre Vault 1.11 Group Behavior.  See Vault Documentation for details
            </summary>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.LDAP.LdapConfig.FullDNValue(System.String)">
            <summary>
            Takes the passed in dn and appends the DN_Suffix to it, returning the full value.
            </summary>
            <param name="dn"></param>
            <returns></returns>
        </member>
        <member name="T:VaultAgent.AuthenticationEngines.TokenAuthEngine">
            <summary>
            The TokenAuthEngine is what enables users to authenticate with a token and perform token related tasks.
            </summary>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.#ctor(VaultAgent.VaultAgentAPI)">
            <summary>
            Constructor for the TokenAuthEngine
            </summary>
            <param name="vaultAgentAPI">Vault object with connectivity and Token information to be used to connect to the Token Engine.</param>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.ListTokenAccessors">
            <summary>
            Returns all Token Accessors in the Vault database.  
            </summary>
            <returns>List<string>> of all token accessors.</string></returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.CreateOrphanToken(VaultAgent.Models.TokenNewSettings)">
            <summary>
            Creates an orphan token (a token with no parent)
            </summary>
            <param name="tokenSettings">A TokenNewSettings object with the options you would like the new token to have. </param>
            <returns>True if token was created successfully.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.CreateToken(VaultAgent.Models.TokenNewSettings)">
            <summary>
            Creates a token that is a child of the calling token.  Note, IF you do not specify any Policies, it will have the same policies as the token
            being used to call this routine.  This could mean it has root access!  Best to always set at least 1 policy.  Use default if you need.
            </summary>
            <param name="tokenSettings">A TokenNewSettings object with the options you would like the new token to have. </param>
            <returns>True if token was created successfully.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.GetTokenWithID(System.String)">
            <summary>
            Retrieves the requested token.  Returns Null if the token could not be found.
            </summary>
            <param name="tokenID">The ID of the token to retrieve.</param>
            <returns>Token object of the requested token or null if the token is invalid.  Will throw error for other issues.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.GetCurrentTokenInfo">
            <summary>
            Returns a Token object of the Token that is currently being used to access Vault with.  This routine also exists within the VaultAuthentication Backend.
            </summary>
            <remarks>This routine and the one in VaultAuthenticationBackend should be kept in sync.</remarks>
            <returns>Token object of the current token used to access Vault Instance with.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.GetTokenViaAccessor(System.String)">
            <summary>
            Retrieves the token associated with the provided accessor ID.
            </summary>
            <param name="accessorID">Accessor ID tied to the token you wish to retrieve.</param>
            <returns>Token object of the token.  Null if invalid accessor token specified.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.RenewToken(System.String)">
            <summary>
            Renews the specified token using the defined lease period defined at token creation
            </summary>
            <param name="tokenID">The ID of the token to be renewed.</param>
            <returns>True if successfully renewed token</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.RenewToken(System.String,SlugEnt.TimeUnit)">
            <summary>
            Renews the specified token using the specified TimeUnit for the new lease period.  This lease period may or may not be honored by the Vault system.
            </summary>
            <param name="tokenID">ID of the token to be renewed.</param>
            <param name="renewalTimeAmount">A suggested amount of time to renew the token for.  Vault has a complex algorithm that is determined at renewal time what the actual Lease Time will be.</param>
            <returns>True if token is renewed successfully.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.RenewTokenSelf">
            <summary>
            Renews the current token being used to access the Vault Instance with using the defined lease period defined at token creation
            </summary>
            <returns>True if successfully renewed token</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.RenewTokenSelf(SlugEnt.TimeUnit)">
            <summary>
            Renews the current token.  Will throw error if cannot renew the token.
            </summary>
            <param name="renewalTimeAmount">Optional TineUnit amount to set the lease time to.  Note, this may or may not be honored by the Vault Instance.  Depends!</param>
            <returns>True if successfully renewed token.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.RevokeToken(System.String,System.Boolean)">
            <summary>
            Revokes the given token and possible all children depending on the revokeChildren parameter.  All dynamic secrets generated with the token are also revoked.
            </summary>
            <param name="tokenID">ID of the token to revoke.</param>
            <param name="revokeChildren">If false [Default] then children tokens will be orphaned.  If true, then all children of the token will also be revoked.</param>
            <returns>True if successfull OR if token could not be found - indicating that it never existed, so same as revoking.  False otherwise.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.RevokeTokenSelf">
            <summary>
            Revokes the current token and ALL child tokens.  All dynamic secrets generated with the token are also revoked.
            </summary>
            <returns>True if successfull.  False otherwise.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.RevokeTokenViaAccessor(System.String)">
            <summary>
            Revokes the token associated with a given accessor AND all child tokens.  Meant for purposes where there is no access to the token, but there is a need to revoke it.
            </summary>
            <param name="AccessorID">The ID of the accessor token that has access to the token you wish to revoke.</param>
            <returns>True if the token was revoked.  False if the token could not be found.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.SaveTokenRole(VaultAgent.Models.TokenRole)">
            <summary>
            Creates / Saves a token role.  
            </summary>
            <param name="tokenRole">The TokenRole object that contains the Token Role to be created / updated.</param>
            <returns>True if token Role was successfully created.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.GetTokenRole(System.String)">
            <summary>
            Retrieves a TokenRole object from Vault with the specified name.
            </summary>
            <param name="tokenRoleName">Name of the tokenRole to retrieve.</param>
            <returns>TokenRole object requested if valid name provided.</returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.ListTokenRoles">
            <summary>
            Returns a List of Roles assigned to the Token
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.AuthenticationEngines.TokenAuthEngine.DeleteTokenRole(System.String)">
            <summary>
            Deletes the specified tokenRoleName
            </summary>
            <param name="tokenRoleName">Token Role to be deleted. </param>
            <returns>True if token role has been deleted.</returns>
        </member>
        <member name="T:VaultAgent.Backends.System.AuthConfig">
             <summary>
            Class that represents Authentication information from the sys/Auth engine.
             </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthConfig.DefaultLeaseTTL">
            <summary>
            Number of seconds for token lease if numeric value, or Vault Time Element if number/string combo, ie, 12m is 12 minutes.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthConfig.MaxLeaseTTL">
            <summary>
            Maximum amount of time that the token can be leased for before requiring a renewal.  
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthConfig.PluginName">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthConfig.Audit_NonHMAC_RequestKeys">
            <summary>
            List of keys that will not be HMAC'd by audit devices in the request object.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthConfig.Audit_NonHMAC_ResponseKeys">
            <summary>
            List of keys that will not be HMAC'd by audit devices in the response object.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthConfig.ListingVisibility">
            <summary>
            Determines if this authentication method is listed in the GUI.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthConfig.PassThroughRequestHeaders">
            <summary>
            List of headers to whitelist and pass from the request to the plugin
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthConfig.AllowedResponseHeaders">
            <summary>
            List of headers to whitelist allowing a plugin to include them in the response.
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.System.AuthMethod">
            <summary>
            Class the represents a Vault Authentication Method
            </summary>
        </member>
        <member name="M:VaultAgent.Backends.System.AuthMethod.#ctor(System.String,System.String)">
            <summary>
            Constructor for AuthMethod.  This is the only method that accepts the actual Vault String value.  The path value can be
            either the Name or Path.  It's a path if it has the trailing slash.
            </summary>
            <param name="path">String - Either the path or the name of the method.  Constructor determines which by the last character.
            If the last character is a trailing slash then it is a path.  If not it is a name.
            </param>
            <param name="type">String - Type of authentication method to create, specified as the backend Vault name.</param>
        </member>
        <member name="M:VaultAgent.Backends.System.AuthMethod.#ctor(System.String,VaultAgent.Backends.System.EnumAuthMethods)">
            <summary>
            Constructor that accepts our EnumAuthMethod argument for constructing the method.
            </summary>
            <param name="path">The path to the mount point for the provided Authentication Method</param>
            <param name="authenticationMethod">EnumAuthMethod - Type of authentication method object to create</param>
        </member>
        <member name="M:VaultAgent.Backends.System.AuthMethod.SetPathAndName(System.String)">
            <summary>
            Since vault backend accepts paths with a trailing slash and without, but usually returns with a slash it can be difficult to compare
            values created with values returned.  We therefore break them into name and path.  Name is without the slash, path is with the slash.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthMethod.Path">
            <summary>
            The name or path of the object to create.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthMethod.Name">
            <summary>
            Name of this authentication backend.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthMethod.Description">
            <summary>
            General description of the authentication method.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthMethod.Type">
            <summary>
            The Vault authentication method type as enum.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthMethod.TypeAsString">
            <summary>
            The Vault Proper string name for the Authentication Method this object represents.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthMethod.Config">
            <summary>
            A Vault Authentication Method configuration object that provides additional details about the Authentication Method.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthMethod.Accessor">
            <summary>
            Returned by Vault.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthMethod.Local">
            <summary>
            Returned by Vault.  Not sure of purpose.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.AuthMethod.SealWrap">
            <summary>
            /// Returned by Vault.  Not sure of purpose.
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.System.EnumAuthMethods">
            <summary>
            The types of Authentication Methods that Vault Supports.  Note, many of these are not implemented in this library but are listed here for completeness.
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumAuthMethods.AppRole">
            <summary>
            An Application Role Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumAuthMethods.AWS">
            <summary>
            An Amazon Web Services Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumAuthMethods.GoogleCloud">
            <summary>
            A Google Cloud Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumAuthMethods.Kubernetes">
            <summary>
            A Kurbernetes Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumAuthMethods.GitHub">
            <summary>
            A GitHub Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumAuthMethods.LDAP">
            <summary>
            An LDAP Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumAuthMethods.Okta">
            <summary>
            A Okta Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumAuthMethods.TLSCertificates">
            <summary>
            A TLSCertificate Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumAuthMethods.UsernamePassword">
            <summary>
            A UserNamePassword Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumAuthMethods.Token">
            <summary>
            An Azure Authentication Method
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.System.AuthMethodEnumConverters">
            <summary>
            Utility Class to convert Enum values of AuthMethods into strings
            </summary>
        </member>
        <member name="M:VaultAgent.Backends.System.AuthMethodEnumConverters.EnumAuthMethodsToString(VaultAgent.Backends.System.EnumAuthMethods)">
            <summary>
            This function takes the EnumAuthMethods value and converts it to the Vault proper string name.
            </summary>
            <param name="method">The EnumAuthMethods value that corresponds to a proper Vault Authentication Method string name.</param>
            <returns>String value of the method.</returns>
        </member>
        <member name="M:VaultAgent.Backends.System.AuthMethodEnumConverters.EnumAuthMethodsFromString(System.String)">
            <summary>
            Converts the Vault proper EnumAuthMethod for the given Vault proper name for the method.
            </summary>
            <param name="authMethod">Vault proper string name for the authentication method.</param>
            <returns>EnumAuthMethod value for the given string name.</returns>
        </member>
        <member name="T:VaultAgent.Backends.System.EnumSecretBackendTypes">
            <summary>
            Enumeration that defines a numeric value for each Secret Backend Type
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumSecretBackendTypes.Transit">
            <summary>
            A Transit Secret Backend        
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumSecretBackendTypes.Secret">
            <summary>
            A Vault Secret Backend Version 1
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumSecretBackendTypes.AWS">
            <summary>
            An Amazon Web Services Secret Backend
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumSecretBackendTypes.CubbyHole">
            <summary>
            A CubbyHole Secret Backend
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumSecretBackendTypes.Generic">
            <summary>
            Not sure why I created this?
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumSecretBackendTypes.PKI">
            <summary>
            A PKI Certificate Secret Backend
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumSecretBackendTypes.SSH">
            <summary>
            An SSH Secret Backend
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumSecretBackendTypes.KeyValueV2">
            <summary>
            A Vault Secret Backend Version 2.  Also known as KV2.  This is preferred over the Secret Version 1 backend
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.System.EnumSecretBackendTypes.Identity">
            <summary>
            An Identity Secret Backend
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.System.VaultPolicyContainer">
            <summary>
            The VaultPolicyContainer is a class that represents all the permissions associated with a given Vault policy.
            A Vault policy consists of one or more Vault paths and the associated permissions to be granted on that path.
            </summary>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyContainer.#ctor(System.String)">
            <summary>
            Creates a Vault Policy Container with the given name.  The name is stored in lower case in the Vault Instance.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyContainer.Name">
            <summary>
            The name of this policy.  Vault stores all policies as lower case values and so it is converted to all lower case when setting the value. 
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyContainer.PolicyPaths">
            <summary>
            Provides access to the set of policy paths that make up this overall security policy.
            Callers should typicall only use this to loop thru list.  They should call AddPolicyPathItem and GetPolicyPathItem to add/retrieve a specific policy path item.
            </summary>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyContainer.TryAddPath(System.String,VaultAgent.Backends.System.VaultPolicyPathItem@)">
            <summary>
            Will add a new VaultPolicyPathItem based upon the provided path parameter OR return a reference to an already existing VaultPolicyPathItem if the path is already
            in the PolicyPaths dictionary.  This is necessary to handle the KV2 ACL policies which have different path prefixes, but which we want to handle as a single object.
            The VaultPolicyPathItem class now handles for this situation.  When reading policies from a Vault Instance this should be the method used to create the
            VaultPolicyPathItem objects.
            <para>
            Returns: True if the item DID NOT exist and it was added.  Returns the new object in the out parameter.
            </para>
            <para>
            Returns: False if the item DID exist.  Will return the EXISTING VaultPolicyPathItem in the out parameter.
            </para>
            </summary>
            <param name="path">The path to add to this policies permission list.  If the path already exists in the list then the existing object is returned.
            Otherwise a new defaulted object is returned.</param>
            <param name="vaultPolicyPathItem">The VaultPolicyPathItem that was addeed or if it already existed, the existing one</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyContainer.AddPolicyPathObject(VaultAgent.Backends.System.VaultPolicyPathItem)">
            <summary>
            Adds the given VaultPolicyPathItem object to the protected paths List for this policy container.  Note:  The object must not already exist.
            </summary>
            <param name="vaultPolicyPathItem">The VaultPolicyPathItem to be added to this policies permission list.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:VaultAgent.Backends.System.VaultPolicyPathItem">
             <summary>
             The VaultPolicyPathItem class is the C# object representation of a Vault Policy object with some enhancements.
             A Vault Policy consists of several items:  Broadly speaking it is:
               <para>  - The Name or Path which is the location in Vault that is to be protected.</para>
               <para>  - A List of attributes that determine the rights that the policy conveys upon that path.</para>
             <para>The path consists of:    |part1|/|part2|/|part3|</para>
             <para>  Part1 is mandatory and is a part of every Vault Policy object.  It is the backend mount name that is being protected.  For example secret.</para>  
             <para>  Part3 is also mandatory and is the actual data path the policy applies to.</para>
             <para>  Part2 is optional/mandatory depending on whether the policy applies to a KeyValue Version 2 path or any other path.</para>
             <para>   - If the path is not a KeyValue Version 2 path, then essentially part 2 does not exist.</para> 
             <para>   - If it does apply to a KeyValue Version 2 path then part 2 will be one of:</para>
             <para>       : metadata</para>
             <para>       : data</para>
             <para>       : delete</para>
             <para>       : undelete</para>
             <para>       : destroy</para>
            
             The backendMount and ProtectedPath properties can only be set during object construction since they are a part of the objects Key value.
            
             The property setters and constructor on this class will automatically set the IsKV2Policy flag to true if it finds any of those keywords as the first 
             part of the path (after the backend mount name).  It is critical that users not use those SubFolders AT ALL in ANY backend.
             Likewise it will insert these setters if the policy is flagged as KV2Policy type.
              
             However, with the advent of KeyValue2 paths some changes needed to be made.
             There are 8 supported attributes that a Vault Policy can have.
               Create  - Allows creating data at the given path. Very few parts of Vault distinguish between create and update, so most operations require both
            				create and update capabilities. Parts of Vault that provide such a distinction are noted in documentation.
               Read    - Allows reading the data.
               Update  - Allows changing the data at the given path. In most parts of Vault, this implicitly includes the ability to create the initial value at the path.
               Delete  - Allows deleting of the data.
               List (Only certain policies can have list capability) - Allows listing values at the given path. Note that the keys returned by a list operation are
            				not filtered by policies. Do not encode sensitive information in key names. Not all backends support listing.
               Sudo    - Allows access to paths that are root-protected. Tokens are not permitted to interact with these paths unless they are have the sudo capability
            				(in addition to the other necessary capabilities for performing an operation against that path, such as read or delete).
               Root    -  //TODO - seems to be gone...
               Deny    - Overrides all other attributes.  Prevents any access to the protected path.
            
            
             <para>
             Vault Inner workings.  Vault can store the permissions for a GIVEN path in one of 3 manners and in some instances requires that a given object be split
             across several paths in order to assign permissions and in fact with KV2 permissions this gets assigned as many as 6 different paths.
             </para>
             <para>In essence there are 3 path endings that determine how a particular set of permissions applies: </para>
             <para>  - backend/secretA/*  /* pattern = Means the permission applies to all SubSecrets of secretA, but NOT secretA itself.
             List can also be specified with this pattern.</para>
             <para>  - backend/secretA/   /  pattern = This is only valid when setting the list permission.  Note /* pattern also works for List permission.</para>
             <para>  - backend/secretA    secret pattern = This means the permissions only apply directly to secretA and NOT ANY subsecrets.</para>
             <para></para>
             <para> With the above knowledge.  We are making the following rules:</para>
             <para>   - We will always save List permissions with the /* pattern as it applies to other permissions as well.</para>
             <para>   - We will never save List permission with the / pattern.</para>
             <para>   - When saving attributes of a secret we always use the secret pattern (no trailing anything).</para>
             <para>   - When saving subsecrets we always use /* pattern.</para>
             <para>   - We will interpret policies read from Vault with the / or /* pattern and  list permission, but always store the path as the /* upon a save.</para>
             </summary>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyPathItem.#ctor(System.String,System.String)">
            <summary>
            Creates a Vault Policy Path Item object.  Note, that the protectedPath parameter will be interrogated to see if it indicates that
            this is an IsSubFolder or IsKV2 policy AND if the Answer is Yes, it WILL OVERRIDE any False setting for isSubFolder and isKV2 parameters
            passed in.
            </summary>
            <param name="backendMount">The name/path to the backend that this policy applies to.  Note, all leading/trailing slashes are removed.</param>
            <param name="protectedPath">The path that this policy is applicable to.  If the path ends with a trailing slash or a trailing /* then it is considered
            a SubFolderPolicyType (Meaning its permissions apply to subsecrets only).
            If the path starts with a KV2 prefix then it will be considered to be a KV2Policy type.  </param>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyPathItem.#ctor(System.String)">
            <summary>
            Creates a Vault Policy Path Item object.  Note, that the protectedPath parameter will be interrogated to see if it indicates that
            this is an IsSubFolder or IsKV2 policy AND if the Answer is Yes, it WILL OVERRIDE any False setting for isSubFolder and isKV2 parameters
            passed in.
            <param name="protectedPath">The path that this policy is applicable to and it must include the backend as the first part of the path in this method call.
            The following reserved words immediately following the backend mount name mean something special to KeyValue V2 backends and thus should never be used to identify
            the start of the path in ANY backend.  This class treats those as Extended Attribute Identifiers and the paths will not protect what you think:
            <para>    You have been warned.  These are:  metadata, data, destroy, delete, undelete.</para>
            If the path ends with a trailing slash or /* then it is considered a SubSecretPolicyType (Meaning its permissions apply to subsecrets).
            If the path starts with a KV2 SubFolder then it will be considered to be a KV2Policy type.  </param>
            </summary>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyPathItem.#ctor(System.Boolean,System.String,System.String)">
            <summary>
            Constructor for creating a KeyValue2 (KV2) type of policy object.  The protectedPath parameter MUST NOT contain the KV2 path prefix (data, metadata, etc).
            If it does you will end up with a true protected path of /backend/data/data/pathA/pathB/secret
            <param name="KeyValue2Type">MUST BE TRUE.  If set to false it will throw an error.</param>
            <param name="backendMount">The name/path to the backend that this policy applies to.  Note, all leading/trailing slashes are removed.</param>
            <param name="protectedPath">The path that this policy is applicable to.  If the path ends with a trailing slash or a trailing /* then it is considered
            a SubFolderPolicyType (Meaning its permissions apply to subsecrets only). </param>
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.Key">
            <summary>
            The key is simply the backend name + the protectedPath .
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.BackendMountName">
            <summary>
            The backend mount name is always the first "folder" in the Vault Instance policy path.  It is a required item.  Cannot contain any slashes.  Leading and Trailing slashes are
            automatically removed.
            </summary>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyPathItem.DeriveBackendName(System.String)">
            <summary>
            Derives the Backend Name from the provided value.
            </summary>
            <param name="backendName"></param>
            <returns></returns>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.ProtectedPath">
            <summary>
            The ProtectedPath is the Vault path (excluding the mount name) that the policy applies to. There are some words of Caution:
            <para> -  You should never use any of the restricted KV2Policy SubFolders as the start of any path in ANY backend.  Doing so will cause the policies to not work.</para>
            <para>    You have been warned.  These are:  metadata, data, destroy, delete, undelete.</para>
            </summary>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyPathItem.DeriveProtectedPath(System.String)">
            <summary>
            Deconstructs the protected path part of the path
            </summary>
            <param name="pathValue">The path to be deconstructed.</param>
            <returns></returns>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.SecretPath">
            <summary>
            Returns the full Vault secret DATA path this policy applies too.
            <para>  - For non-KV2 policies = The backendmount + the protectedPath</para>
            <para>  - For KV2-Policies = the backendmount + "/data/" + the ProtectedPath</para>
            <para>It will never return the Extended KV2 properties path other than the /data/ one.  Thus it will never return metadata, undelete, delete and others.</para>
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.IsSubFolderType">
            <summary>
            Returns true if this object protects SubSecrets or is only relevant to the specific secret path identified.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.IsKV2Policy">
            <summary>
            Gets whether a policy Item refers to a Vault KeyValue2 policy.  This is important because KV2 paths are different than all other backend type paths.
            Specifically all data is stored at backendMount/data/|rest of path|.  When this flag is set to true, it turns on the extended security settings that
            KV2 backends support.  In addition the fullPath that is returned is altered to include the KV2 security SubFolder inside of it.  The KV2 security SubFolder is
            the 2nd path from the left.  So backend1/data/path/pathb/pathc.  data is the KV2 security SubFolder.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.KV2_PathID">
            <summary>
            The KV2_PathID is the value of the path SubFolder on a KeyValue Version 2 ACL policy path.  For example given the below Vault KV2 ACL Policy path:
            backendA/metadata/path1/pathB.
            The KV2_PathID would be metadata.
            This is necessary to know when reading policies from the Vault Instance and trying to convert them into VaultPolicyPathItem objects.  Since this C#
            class combines multiple Vault paths into a single path, when creating the objects from Vault, we must know what the original KV2 SubFolder was so we
            can set the appropriate permission.  For example, the Update permission is stored both on the /data/ path as well as the /delete/ path.  We must be
            able to identify which is which.  This property allows us to tell that.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.CreateAllowed">
            <summary>
            Sets the Create allowed attribute.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.ReadAllowed">
            <summary>
            Sets the Read allowed attribute.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.UpdateAllowed">
            <summary>
            Sets the Update allowed attribute.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.DeleteAllowed">
            <summary>
            Sets the Delete allowed attribute.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.ListAllowed">
            <summary>
            Sets the List allowed attribute - If the policy object is of a type that can be Listed.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.SudoAllowed">
            <summary>
            Sets the Sudo allowed attribute.  Sudo allows access to paths that are root-protected.  Tokens are not allowed to access these paths unless they have the sudo capability.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.RootAllowed">
            <summary>
            The Root Allowed Permission
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.Denied">
            <summary>
            Sets or Gets the Denied property.  This property will have one of 3 values:
            <para> - Null - Upon initial object creation this value is undefined.</para>
            <para> - True - Was explicitly set to denied by caller.</para>
            <para> - False - Was explicity set to not denied by caller or by another property calling it.</para>
            <para>If setting Denied to True, then ALL other permissions are set to False, including all the extKV2 properties.  </para>
            <para>If setting denied to false and it was True, then none of the other permissions are changed (they remain false), you must manually enable the ones you want.</para>
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.CRUDAllowed">
            <summary>
            Shortcut method for setting or getting a CRUD value (Whether the policy path item has Create, Read, Update and Delete all set to true.  Returns True
            if all 4 are set to true, False otherwise.  During Set operations, it will automatically set all of the values to the value specified (true or false)
            <para>Note:  Create,Read,Update and Allowed only means the "data" part of the Secret.  So it does not set any of the _extKV2 attributes that might
            use the create attribute to set a _extKV2 property value.  Those attributes are only set thru the _extKV2 properties directly.</para>
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.FullControl">
            <summary>
            A Shortcut method to setting full control for a given path.  This sets Create, Read, Update, Delete AND List to the value specified.  On a KV2 type policy
            object it will also set all the _extKV2 attributes to true as well.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.ExtKV2_DeleteAnyKeyVersion">
            <summary>
            When true the permission to delete any version of a secret is enabled.  Throws InvalidOperationException if the policy is not a KV2 type policy.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.ExtKV2_UndeleteSecret">
            <summary>
            When true the permission to undelete a secret is enabled.  Throws InvalidOperationException if the policy is not a KV2 type policy.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.ExtKV2_DestroySecret">
            <summary>
            Only applies to KeyValue2 policy paths.  When true the permission to destroy the versions of a secret is enabled.  Throws InvalidOperationException if the policy is not a KV2 type policy.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.ExtKV2_ViewMetaData">
            <summary>
            Only applies to KeyValue2 policy paths.  When true the permission to view the metadata for a given secret is enabled.  Throws InvalidOperationException if the policy is not a KV2 type policy.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.ExtKV2_DeleteMetaData">
            <summary>
            Only applies to KeyValue2 policy paths.  When true the permission to delete the metadata for a given secret is enabled.  Throws InvalidOperationException if the policy is not a KV2 type policy.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultPolicyPathItem.ExtKV2_ListMetaData">
            <summary>
            Ability to List KeyValue2 Versions.  Throws InvalidOperationException if the policy is not a KV2 type policy.
            </summary>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyPathItem.SeparatePathIntoComponents(System.String)">
            <summary>
            Takes a path string and decomposes it into its backend, protectedPath components and determines if the path indicates whether this is
            a SubFolder type path or KV2 policy path.
            </summary>
            <param name="path">The path object to be analyzed and decomposed.</param>
            <returns>Tuple:  (Backend, protectedPath, isKV2Policy, isSubFolderType</returns>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyPathItem.CalculateKeyValue(System.String)">
            <summary>
            Returns the key value given the provided path.  This version is used by external entities who wish to know what the key value is given a particular
            path object.  Internal routines should use the multiple parameter version.
            </summary>
            <param name="path">The path to calculate a key value for.</param>
            <returns>String:  What the key is given the path.</returns>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyPathItem.CalculateKeyValue(System.String,System.String)">
            <summary>
            Returns the VaultPolicyPathItem Key value based upon the passed in values.  Should be used by internal routines.
            </summary>
            <param name="backend">The Backend Mount component of the object.</param>
            <param name="protectedPath">The path that the policy is protecting.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyPathItem.ToVaultHCLPolicyFormat">
            <summary>
            Returns the Vault HCL policy text for this object.  This can then be inserted into the overall Policy object and sent to Vault.
            This may (and likely will) result in the output of multiple path statements for KeyValue V2 path statements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyPathItem.BuildHCLPolicyPathStatement(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Builds a single Vault HCL formatted JSON Policy Path statement.
            </summary>
            <param name="path">The vault path that the policy applies to.</param>
            <param name="permissions">A List of permissions that apply to this path.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyPathItem.Clear_KV2Path">
            <summary>
            This method will clear the KV2_PathID value.  This is a necessary routine in order to properly convert Vault Policies into these C# objects when
            reading from the Vault Instance.
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.System.VaultPolicyPathItemKV2">
            <summary>
            A Vault Policy Path Item object that represents Vault Permissions for a given path in a KV2 secret database.  See VaultPolicyPathItem class info for all
            implementation details.
            </summary>
        </member>
        <member name="M:VaultAgent.Backends.System.VaultPolicyPathItemKV2.#ctor(System.String,System.String)">
            <summary>
            Constructor for creating a KeyValue2 (KV2) type of policy object.  The protectedPath parameter MUST NOT contain the KV2 path prefix (data, metadata, etc).
            If it does you will end up with a true protected path of /backend/data/data/pathA/pathB/secret
            <param name="backendMount">The name/path to the backend that this policy applies to.  Note, all leading/trailing slashes are removed.</param>
            <param name="protectedPath">The path that this policy is applicable to.  If the path ends with a trailing slash or a trailing /* then it is considered
            a SubFolderPolicyType (Meaning its permissions apply to subsecrets only).</param>
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.System.VaultSysMountConfig">
            <summary>
            Represents the configuration settings for a given Vault Mount.  
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultSysMountConfig.DefaultLeaseTTL">
            <summary>
            The default lease duration, specified as a string duration like "5s" or "30m".
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultSysMountConfig.MaxLeaseTTL">
            <summary>
            The maximum lease duration, specified as a string duration like "5s" or "30m"
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultSysMountConfig.ForceNoCache">
            <summary>
            Disable caching.  Defaults to False
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultSysMountConfig.PluginName">
            <summary>
            The name of the plugin in the plugin catalog to use
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultSysMountConfig.RequestKeysToNotAuditViaHMAC">
            <summary>
            Comma-separated list of keys that will not be HMAC'd by audit devices in the request data object
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultSysMountConfig.ResponseKeysToNotAuditViaHMAC">
            <summary>
            Comma-separated list of keys that will not be HMAC'd by audit devices in the response data object
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultSysMountConfig.VisibilitySetting">
            <summary>
            Speficies whether to show this mount in the UI-specific listing endpoint. Valid values are "unauth" or "hidden". If not set, behaves like "hidden"
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultSysMountConfig.SetVisibilityHidden">
            <summary>
            Sets the VisibilitySetting to hidden.  Best to use this method to set the value.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultSysMountConfig.SetVisibilityViewable">
            <summary>
            Sets the visibility to viewable.  Best to use this method to set the value to viewable.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.System.VaultSysMountConfig.PassThruRequestHeaders">
            <summary>
            Comma-separated list of headers to whitelist and pass from the request to the backend.
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.EnumBackendTypes">
            <summary>
            Enum representing the possible  backends that Vault can support.  Note, not everything listed here is implemented at this time in this library.
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.Transit">
            <summary>
            A Transit Secret Backend
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.Secret">
            <summary>
            A Vault Secret Backend Version 1
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.AWS">
            <summary>
            An Amazon Web Services Secret Backend
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.CubbyHole">
            <summary>
            A CubbyHole Secret Backend
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.Generic">
            <summary>
            Not sure why I created this?
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.PKI">
            <summary>
            A PKI Certificate Secret Backend
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.SSH">
            <summary>
            An SSH Secret Backend
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.KeyValueV2">
            <summary>
            A Vault Secret Backend Version 2.  Also known as KV2.  This is preferred over the Secret Version 1 backend
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.Identity">
            <summary>
            An Identity Secret Backend
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.A_AppRole">
            <summary>
            An Application Role Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.A_AWS">
            <summary>
            An Amazon Web Services Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.A_GoogleCloud">
            <summary>
            A Google Cloud Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.A_Kubernetes">
            <summary>
            A Kurbernetes Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.A_GitHub">
            <summary>
            A GitHub Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.A_LDAP">
            <summary>
            An LDAP Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.A_Okta">
            <summary>
            A Okta Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.A_TLSCertificates">
            <summary>
            A TLSCertificate Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.A_UsernamePassword">
            <summary>
            A UserNamePassword Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.A_Token">
            <summary>
            An Azure Authentication Method
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.EnumBackendTypes.NotDefined">
            <summary>
            This is the default.  Unit tests should test each backend and make sure each class overrides the type.
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.KV2EnumSecretSaveOptions">
            <summary>
            The options that determine when a KeyValue2 Type Secret will be allowed to be saved to the Vault.
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.KV2EnumSecretSaveOptions.OnlyIfKeyDoesNotExist">
            <summary>
            Saving of the Secret in Vault will be permitted only if it does not already exist in the Vault.
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.KV2EnumSecretSaveOptions.OnlyOnExistingVersionMatch">
            <summary>
            Only allow the saving of the Secret, if the caller has provided the current version of the Secret.
            <para>This prevents distributed apps, in which multiple apps attempt to overwrite a secret.</para>
            <para>Only an app that knows the current version number of the secret will be allowed to save the secret</para>
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.KV2EnumSecretSaveOptions.AlwaysAllow">
            <summary>
            The save should always be allowed - allows overwriting the current version of a secret.
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.Transit.Models.TransitBackupRestoreItem">
            <summary>
            A Vault Response Object For a BackupRestore Item
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.Transit.Models.TransitBackupRestoreItem.KeyBackup">
            <summary>
            The backup contains all the configuration data and keys of all the versions along with the HMAC key
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.Transit.Models.TransitBackupRestoreItem.Success">
            <summary>
            True if successful
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.Transit.Models.TransitBackupRestoreItem.ErrorMsg">
            <summary>
            If Errors encountered then this contains the error message
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.Transit.Models.TransitBulkItemToDecrypt">
            <summary>
            Represents a single item within a list of items that need to be decrypted.  
            </summary>
        </member>
        <member name="M:VaultAgent.Backends.Transit.Models.TransitBulkItemToDecrypt.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="encryptedValue">The Encrypted Value</param>
            <param name="context"></param>
        </member>
        <member name="P:VaultAgent.Backends.Transit.Models.TransitBulkItemToDecrypt.base64Context">
            <summary>
            Base64 encoded Context for key derivation
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.Transit.Models.TransitBulkItemToDecrypt.encryptedItem">
            <summary>
            The Cipher Text to decrypt
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.Transit.Models.TransitConstants">
            <summary>
            Constants used by the Transit Backend
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.Transit.Models.TransitConstants.KeyConfig_MinDecryptVers">
            <summary>
            Minimum Decryption version
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.Transit.Models.TransitConstants.KeyConfig_MinEncryptVers">
            <summary>
            Min Encytpyion Version
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.Transit.Models.TransitConstants.KeyConfig_DeleteAllowed">
            <summary>
            Deletion Allowed
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.Transit.Models.TransitConstants.KeyConfig_Exportable">
            <summary>
            Is Exportable
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.Transit.Models.TransitConstants.KeyConfig_Allow_Backup">
            <summary>
            Plaintext Backup is allowed
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.Transit.Models.TransitDataKey">
            <summary>
            Represents the response object from the GenerateDataKey method.  Provides the encrypting and decrypting key values.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.Transit.Models.TransitDataKey.PlainText">
            <summary>
            Plain Text version of the Key
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.Transit.Models.TransitDataKey.CipherText">
            <summary>
            The cipher text
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.Transit.Models.TransitDecryptedItem">
            <summary>
            A single Vault Decrypted value.  
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.Transit.Models.TransitDecryptedItem.DecryptedValue">
            <summary>
            The decrypted Value
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.Transit.Models.TransitDecryptionResultsBulk">
            <summary>
            Contains the results of a bulk decryption operation.  The items are ordered in the list in the same order as the original encrypted values.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.Transit.Models.TransitDecryptionResultsBulk.DecryptedValues">
            <summary>
            A List Of TransitDecryptedItems
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.Transit.Models.TransitEncryptedItem">
            <summary>
            Represents a Vault Encrypted value.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.Transit.Models.TransitEncryptedItem.EncryptedValue">
            <summary>
            The Encrypted Item
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.Transit.Models.TransitEncryptionResultsBulk">
            <summary>
            Contains the encrypted values from the bulk encrypt operation.  Values are ordered in same order as they were provided on the input side.
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.Transit.Models.TransitEncryptionResultsBulk.EncryptedValues">
            <summary>
            A List of TransitEncryptedItems
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.TransitBulkItemToEncrypt">
            <summary>
            Represents a single item to be encrypted as part of a Bulk Encryption call.  
            </summary>
        </member>
        <member name="M:VaultAgent.Backends.TransitBulkItemToEncrypt.#ctor(System.String,System.String)">
            <summary>
            Constructor for a single item to be encrypted.
            </summary>
            <param name="itemToEncrypt">The string value of the item to encrypt</param>
            <param name="context">The Base64 Context for key derivation if desired</param>
        </member>
        <member name="M:VaultAgent.Backends.TransitBulkItemToEncrypt.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.TransitBulkItemToEncrypt.base64Context">
            <summary>
            The Base64 Context for Key Derivation if desired
            </summary>
        </member>
        <member name="P:VaultAgent.Backends.TransitBulkItemToEncrypt.base64ItemToEncrypt">
            <summary>
            The Item to be encrypted
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.TransitEnumHashingAlgorithm">
            <summary>
            The Hashing Methods supported by Transit
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.TransitEnumHashingAlgorithm.sha2_224">
            <summary>
            224 bit Key Length
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.TransitEnumHashingAlgorithm.sha2_256">
            <summary>
            256 bit Key Length
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.TransitEnumHashingAlgorithm.sha2_384">
            <summary>
            384 bit Key Length
            </summary>
        </member>
        <member name="F:VaultAgent.Backends.TransitEnumHashingAlgorithm.sha2_512">
            <summary>
            512 bit Key Length
            </summary>
        </member>
        <member name="T:VaultAgent.Backends.TransitEnumKeyType">
            <summary>
            Transit Key Types
            </summary>
        </member>
        <member name="T:VaultAgent.VaultSystemBackend">
            <summary>
            This class represents core Vault System Backend object.  This object is used to control the main Vault system such as mounting and enabling
            SecretEngines and AuthenticationEngines, policies, etc.
            </summary>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.#ctor(System.String,VaultAgent.VaultAgentAPI,System.String)">
            <summary>
            Constructor.  Initializes the connection to Vault and stores the token.
            <param name="token">Token value that has permissions to Vault.</param>
            <param name="vaultAgentAPI">The Vault API Connector</param>
            <param name="name">The name you wish to give the Vault System backend.  At the present time this is purely cosmetic and does nothing.</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.AuthEnable(VaultAgent.Backends.System.AuthMethod)">
            <summary>
            Enables the provided Authentication backend.
            </summary>
            <param name="am">The AuthMethod object that represents the authentication engine to enable.</param>
            <returns>True if authentication engine was successfully enabled. False otherwise.
            Throws exception: VaultException with SpecificErrorCode set to BackendMountAlreadyExists if a mount already exists at that location.
            </returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.AuthDisable(System.String)">
            <summary>
            Disables the authentication method at the given path.
            </summary>
            <param name="authName"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.AuthDisable(VaultAgent.Backends.System.AuthMethod)">
            <summary>
            Disables the given authentication method 
            </summary>
            <param name="am">The AuthMethod that should be disabled</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.AuthListAll">
            <summary>
            Lists all authentication methods in the current Vault System.
            <returns>Dictionary\string,AuthMethod> containing all Authentication Methods</returns>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.AuthExists(System.String)">
            <summary>
            Returns true if the authentication provider with the given name exists.  False otherwise.
            </summary>
            <param name="authName"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.AuditEnableFileDevice(System.String,System.String,System.String)">
            <summary>
            Creates a new audit device with the specified name.
            </summary>
            <param name="auditorName">A name to be given to the audit device</param>
            <param name="filePath">A full path and filename specification of where the audit entries should be written.</param>
            <param name="description">A description of the audit device.</param>
            <returns>True if successfully created.</returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.AuditDisable(System.String)">
            <summary>
            Disables (deletes? Not Sure) the specified audit device
            </summary>
            <param name="auditDeviceName">Name of the Audit device to delete.</param>
            <returns>True if audit device successfully deleted.  False otherwise.</returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.GetTokenCapabilityOnPaths(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns a Dictionary of objects and the permissions they contains, as well as an overall Capabilities object that summarizes the
            permissions that a Token has on the List of paths provided.
            <para>https://www.vaultproject.io/api/system/capabilities.html</para>
            </summary>
            <param name="tokenID">The Token to evaluate</param>
            <param name="paths">A list of paths to check the token against</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.SysMountCreate(System.String,System.String,VaultAgent.Backends.System.EnumSecretBackendTypes,VaultAgent.Backends.System.VaultSysMountConfig)">
            <summary>
            Creates (Enables in Vault terminology) a new backend secrets engine with the given name, type and configuration settings.
            Throws:  [VaultInvalidDataException] when the mount point already exists.  SpecificErrorCode will be set to: [BackendMountAlreadyExists]
            <param name="mountPath">The root path to this secrets engine that it will be mounted at.  Is a part of every URL to this backend.</param>
            <param name="description">Brief human friendly name for the mount.</param>
            <param name="backendType">The type of secrets backend this mount is.  </param>
            <param name="config">The configuration to be applied to this mount.</param>
            <returns>Bool:  True if successful in creating the backend mount point.  False otherwise.</returns>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.SysMountListSecretEngines">
            <summary>
            [Not Implemented Yet] Returns a List of Secret Engines
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.SysMountDelete(System.String)">
            <summary>
            Deletes the backend Mount.
            </summary>
            <param name="name">Name of the mount to delete.</param>
            <returns>True if successful.  False otherwise.</returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.SysMountReadConfig(System.String)">
            <summary>
            Reads the configuration for the given backend mount point.
            </summary>
            <param name="mountPath">The Name(path) of the backend to read the configuration for.</param>
            <returns><see cref="T:VaultAgent.Backends.System.VaultSysMountConfig"/>VaultSysMountConfig object containing the configuration settings.</returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.SysMountExists(System.String)">
            <summary>
            Attempts to read the sys mount config to determine if the path exists or not.  Returns true if the path exists, false otherwise
            </summary>
            <param name="mountPath">The name (path) of the backend to verify the existence of</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.SysMountUpdateConfig(System.String,VaultAgent.Backends.System.VaultSysMountConfig,System.String)">
            <summary>
            Updates the configuration of a given system mount point.  If description is null then it will not be updated.
            </summary>
            <param name="Name">The name of the mount to update</param>
            <param name="config"><see cref="T:VaultAgent.Backends.System.VaultSysMountConfig"/>The backend's configuration changes</param>
            <param name="description">If set, the description will be updated.  </param>
            <returns>True if successfull.  False otherwise.</returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.SysPoliciesACLList">
            <summary>
            Returns a list of all ACL Policies in the Vault Instance
            </summary>
            <returns>List[string] of all ACL policies by name.</returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.SysPoliciesACLDelete(System.String)">
            <summary>
            Deletes a given policy.  
            </summary>
            <param name="policyName">The name of the policy to delete.</param>
            <returns>True if successful in deleting.</returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.SysPoliciesACLCreate(VaultAgent.Backends.System.VaultPolicyContainer)">
            <summary>
            Creates or Updates a given policy object.  
            </summary>
            <param name="policyContainerItem">The VaultPolicyContainer item that should be persisted into the Vault Instance Store.</param>
            <returns>True if successfully saved into Vault Instance.  False otherwise.</returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.SysPoliciesACLUpdate(VaultAgent.Backends.System.VaultPolicyContainer)">
            <summary>
            Updates a given policy.  Is merely a wrapper for SysPoliciesACLCreate since Vault has no update function.
            </summary>
            <param name="policyContainerItem">The VaultPolicyPathItem object that should be updated in Vault.</param>
            <returns>True if successful.  False otherwise.</returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.SysPoliciesACLExists(System.String)">
            <summary>
            Returns true if a policy exists, false if it does not.  This is a much more efficient and faster operation than calling Read, if all you need to
            know is if the Policy exists.  
            </summary>
            <param name="policyName"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.SysPoliciesACLRead(System.String)">
            <summary>
            Reads the Vault policy with the given name.
            <para>Returns the VaultPolicyContainer object or throws an error.</para>
            <para>Throws: VaultInvalidPathException with SpecificErrorCode property set to ObjectDoesNotExist if not found</para>
            </summary>
            <param name="policyName">Name of the policy to retrieve.</param>
            <returns>A VaultPolicyContainer object with the values read from Vault.</returns>
        </member>
        <member name="M:VaultAgent.VaultSystemBackend.ParseACLPaths(System.String,VaultAgent.Backends.System.VaultPolicyContainer)">
            <summary>
            Internal routine that processes the returned string from Vault and parses it into a VaultPolicyContainer object.
            </summary>
            <param name="data">The string data returned by Vault.</param>
            <param name="vp">VaultPolicyContainer object that should be filled in with the values from Vault.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="T:VaultAgent.VaultAuthenticationBackend">
            <summary>
            Internal abstract class representing an Authentication backend method for Vault.  The following expectations are made of derived classes.
             - That they will provide some type of a login method.  That method cannot be abstracted due to the fact that different backends have
               different requirements for logging in (some require user id and password, others just a token, others a role ID and secretID.  It is left up to the
               backends to validate that they have the necessary information.  See CanLogin method below.
                Example:  public bool Credentials (string userName, string password).
             - The login method must call this classes AfterLogin method.  
             - The login method should return true on success.  False otherwise.
             
            </summary>
        </member>
        <member name="M:VaultAgent.VaultAuthenticationBackend.#ctor(System.String,System.String,VaultAgent.VaultAgentAPI)">
            <summary>
            Constructor
            </summary>
            <param name="backendName">A Name for the backend.  This is noy used or stored internally in Vault anywhere. </param>
            <param name="backendMountPoint">The mount point where the backend is mounted at.</param>
            <param name="vault">The Vault object to use to establish a connection to Vault.</param>
        </member>
        <member name="M:VaultAgent.VaultAuthenticationBackend.GetMyTokenInfo">
            <summary>
            Returns a Token object of the Token that is currently being used to access Vault with.  This routine also exists within the VaultAuthentication Backend.
            </summary>
            <remarks>This routine and the one in VaultAuthenticationBackend should be kept in sync.</remarks>
            <returns>Token object of the current token used to access Vault Instance with.</returns>
        </member>
        <member name="T:VaultAgent.VaultSecretBackend">
            <summary>
            Internal abstract class representing a secret backend.
            </summary>
        </member>
        <member name="T:VaultAgent.Models.EnumTokenType">
            <summary>
            The Type of Token
            </summary>
        </member>
        <member name="F:VaultAgent.Models.EnumTokenType.Root">
            <summary>
            The token is a root token.  These should almost never be used.
            </summary>
        </member>
        <member name="F:VaultAgent.Models.EnumTokenType.Client">
            <summary>
            Token is a client token. This is the typical type of token
            </summary>
        </member>
        <member name="F:VaultAgent.Models.EnumTokenType.Accessor">
            <summary>
            Token is an accessor token.
            </summary>
        </member>
        <member name="T:VaultAgent.Models.LoginResponse">
            <summary>
            This class is used to get the response from a Login attempt.  It provides much of the information you will need in this object
            directly.  But best is still to go read the token object that corresponds to the ClientToken property.
            <remarks>Note: TokenType added from LDAP login.  Is not found on EntityLogin.</remarks>
            </summary>
        </member>
        <member name="P:VaultAgent.Models.LoginResponse.ClientToken">
            <summary>
            The ID of the token that was generated from the Login.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.LoginResponse.Accessor">
            <summary>
            The accessor value for the Client Token
            </summary>
        </member>
        <member name="P:VaultAgent.Models.LoginResponse.Policies">
            <summary>
            All policies that apply to this token.  This is the combined TokenPolicies + IdentityPolices.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.LoginResponse.TokenPolicies">
            <summary>
            The policies assigned to the token that came from the normal policy process. 
            </summary>
        </member>
        <member name="P:VaultAgent.Models.LoginResponse.IdentityPolicies">
            <summary>
            Policies that were provided due to the entity the login object was tied to.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.LoginResponse.Metadata">
            <summary>
            Additional informational items that are associated with the token.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.LoginResponse.LeaseDuration">
            <summary>
            How long this is valid for
            </summary>
        </member>
        <member name="P:VaultAgent.Models.LoginResponse.Renewable">
            <summary>
            Whether the token is renewable or not.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.LoginResponse.EntityId">
            <summary>
            The Entity this login is associated with.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.LoginResponse.TokenType">
            <summary>
            The type of token this is:  Service or Batch are the only valid values.
            </summary>
        </member>
        <member name="T:VaultAgent.Models.Token">
            <summary>
            Represents a Vault token.  
            
            Note:  An Accessor Token does not have an ID value.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.ID">
            <summary>
            The ID or unique identifier of the token.  This is usually set to a random value by the Vault backend upon token creation.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.DisplayName">
            <summary>
            A name or description for the token for informational purposes only.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.APIPath">
            <summary>
            Readonly field.  The path where the token was created at.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.ExpireTimeStr">
            <summary>
            When (Date and Time) the Token is set to expire
            Example from Vault docs:  expire_time         2018-01-11T20:21:17.900969673Z
            </summary>
        </member>
        <member name="M:VaultAgent.Models.Token.ExpireTimeAsDateTime">
            <summary>
            Returns the ExpireTime as a valid C# DateTime object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VaultAgent.Models.Token.MaxTTL">
            <summary>
            An Explicit maximum lifetime for the token.  This value is a hard limit and cannot be exceeded.  
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.Metadata">
            <summary>
            Metadata is used to attach arbitrary string-type metadata to the token.  This data is displayed in the audit log.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.NumberOfUses">
            <summary>
            A maximum number of times that this token can be used.  After the last use the token is automatically revoked by the Vault Instance.  Zero is unlimited.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.IsOrphan">
            <summary>
            Whether the token has a parent token or is without parent.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.Period">
            <summary>
            Indicates that the token should never expire. It should be renewed before the end of the period and it will be renewed for the value specified.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.Policies">
            <summary>
            A list of policies that this token is associated with.  This is the combined total of policies from the backend that supplied the token and the
            identity associated with this token.  IE.  TokenPolicies + IdentityPolicies
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.IsRenewable">
            <summary>
            Indicates if this token is renewable.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.TTL">
            <summary>
            The TTL or number of seconds until the Token expires
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.TTLasTimeUnit">
            <summary>
            Alternative method of getting/setting the TTL of the token in a more readable TimeUnit Class.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.AccessorTokenID">
            <summary>
            The accessor token ID that can be used to access this root token without knowing the root token ID.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.TokenPolicies">
            <summary>
            The policies that this token has received from the actual authentication backend object (appRole, userRole, etc)
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.IdentityPolicies">
            <summary>
            The policies that this token has received from the entity that it is related too.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.CreationTime">
            <summary>
            The time in seconds since 1/1/1970 that the token was created.  Read Only.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.CreationTime_AsDateTime">
            <summary>
            Returns the CreationTime of the token as a DateTime Object
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.CreationTTL">
            <summary>
            The TTL time period the token originally had upon creation.  This value does not change.  Not sure this has an real use?
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.EntityId">
            <summary>
            The Entity The token is associated with if any.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.IssueTime">
            <summary>
            The Date and Time the token was originally issued.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.ReadFromVault">
            <summary>
            True if this token information was retrieved from the Vault Instance.  Used internally for a few items.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.Token.TokenType">
            <summary>
            This value should never be set by a caller.  Only read.
            </summary>
        </member>
        <member name="M:VaultAgent.Models.Token.#ctor(System.String,System.String,System.Int64,System.Int64,System.String,System.DateTimeOffset)">
            <summary>
            Default JSON Constructor
            </summary>
        </member>
        <member name="M:VaultAgent.Models.Token.#ctor">
            <summary>
            Default empty constructor.  Initializes the Metadata dictionary.
            </summary>
        </member>
        <member name="M:VaultAgent.Models.Token.#ctor(System.String)">
            <summary>
            Constructor that accepts the token ID value
            </summary>
            <param name="tokenID"></param>
        </member>
        <member name="P:VaultAgent.Models.Token.HasParent">
            <summary>
            Returns True if this token has a parent token.
            </summary>
        </member>
        <member name="T:VaultAgent.Models.TokenNewSettings">
            <summary>
            Class that captures the attributes that Vault Returns when requesting Token Information.  Some of the properties are also used when saving a Token.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenNewSettings.ID">
            <summary>
            The Token's ID.  Typically this is set by Vault.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenNewSettings.RoleName">
            <summary>
            Name of the Role to create token against.  If speficied the Role may override other manually set Token Options
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenNewSettings.Policies">
            <summary>
            The policies that are associated with the Token
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenNewSettings.MetaData">
            <summary>
            Arbirtray data that is associated with the token
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenNewSettings.NoParentToken">
            <summary>
            True if the token has no parent.  
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenNewSettings.NoDefaultPolicy">
            <summary>
            Detach the default policy from the policy set for this token.  See Vault for what this means...
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenNewSettings.IsRenewable">
            <summary>
            If the Token can be renewed
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenNewSettings.TTL">
            <summary>
            Initial TTL to associate with the Token.  
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenNewSettings.MaxTTL">
            <summary>
            The Maximum amout of time that the TTL for this token can be set to
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenNewSettings.Name">
            <summary>
            Name of this Token
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenNewSettings.NumberOfUses">
            <summary>
            How many times this token can be used
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenNewSettings.RenewalPeriod">
            <summary>
            How much time to extend the Token, when it is renewed.
            </summary>
        </member>
        <member name="M:VaultAgent.Models.TokenNewSettings.#ctor(System.String)">
            <summary>
            Constructor for use when reading the Settings from Vault.  Sets the ID.
            </summary>
            <param name="id">The token ID that Vault assigned</param>
        </member>
        <member name="M:VaultAgent.Models.TokenNewSettings.#ctor">
            <summary>
            Creates a new TokenSettings object with an empty initialized Policies list and empty Metadata Dictionary.
            </summary>
        </member>
        <member name="T:VaultAgent.Models.TokenRole">
            <summary>
            A Token and its related properties that represent a Role
            </summary>
        </member>
        <member name="M:VaultAgent.Models.TokenRole.#ctor">
            <summary>
            Constructs a new TokenRole Object
            </summary>
        </member>
        <member name="M:VaultAgent.Models.TokenRole.#ctor(System.String)">
            <summary>
            Constructor for non-JSON
            </summary>
            <param name="roleName"></param>
        </member>
        <member name="P:VaultAgent.Models.TokenRole.AllowedPolicies">
            <summary>
            If set, tokens can be created with any subset of the policies in this list, rather than the normal semantics of tokens being a subset of the 
            calling token's policies. The parameter is a comma-delimited string of policy names. If at creation time no_default_policy is not set and "default" 
            is not contained in disallowed_policies, the "default" policy will be added to the created token automatically.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenRole.BoundCidrs">
            <summary>
            If set, restricts usage of the generated token to client IPs falling within the range of the specified CIDR(s). Unlike most other 
            role parameters, this is not reevaluated from the current role value at each usage; it is set on the token itself. Root tokens with no TTL will 
            not be bound by these CIDRs; root tokens with TTLs will be bound by these CIDRs
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenRole.DisallowedPolicies">
            <summary>
            If set, successful token creation via this role will require that no policies in the given list are requested. The parameter is a 
            comma-delimited string of policy names. Adding "default" to this list will prevent "default" from being added automatically to created tokens.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenRole.ExplicitMaxTtl">
            <summary>
            Provides a maximum lifetime for any tokens issued against this role, including periodic tokens. 
            Unlike direct token creation, where the value for an explicit max TTL is stored in the token, for roles this check will always use the 
            current value set in the role. The main use of this is to provide a hard upper bound on periodic tokens, which otherwise can live forever 
            as long as they are renewed. This is an integer number of seconds
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenRole.Name">
            <summary>
            The name of the token role
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenRole.IsOrphan">
            <summary>
            If True, tokens created against this role will not have parents and thus not automatically revoked by the revocation of any other token.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenRole.PathSuffix">
            <summary>
            If set, tokens created against this role will have the given suffix as part of their path in addition to the role name. 
            This can be useful in certain scenarios, such as keeping the same role name in the future but revoking all tokens created against it before some point in time. 
            The suffix can be changed, allowing new callers to have the new suffix as part of their path, and then tokens with the old suffix can be revoked 
            via /sys/leases/revoke-prefix.
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenRole.Period">
            <summary>
            If specified, the token will be periodic; it will have no maximum TTL (unless an "explicit-max-ttl" is also set) but every renewal will use 
            the given period. Requires a root/sudo token to use
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TokenRole.IsRenewable">
            <summary>
            Set to false to disable the ability of the token to be renewed past its initial TTL. 
            Setting the value to true will allow the token to be renewable up to the system/mount maximum TTL
            </summary>
        </member>
        <member name="T:VaultAgent.Models.TransitKeyInfo">
            <summary>
            This class represents a Vault Transit key object. 
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.Name">
            <summary>
            Name of the Transit Key
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.Type">
            <summary>
            The Type
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.LatestVersionNum">
            <summary>
            Latest Version Number of this key
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.MinDecryptionVersion">
            <summary>
            The minimum version decrypted
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.MinEncryptionVersion">
            <summary>
            The minimum encrypted Version
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.SupportsDecryption">
            <summary>
            If Decryption is allowed
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.SupportsDerivation">
            <summary>
            If Key Derivation is allowed
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.SupportsEncryption">
            <summary>
            If Encryption is supported
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.SupportsSigning">
            <summary>
             If the key supports signing
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.AllowsPlainTextBackup">
            <summary>
            If plaintext backup is allowed
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.SupportsConvergentEncryption">
            <summary>
            True if it supports Convergent Encryption
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.CanDelete">
            <summary>
            If deletion is allowed
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.IsDerivable">
            <summary>
            If Key is derivable
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.IsExportable">
            <summary>
            If Key is exportable
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.KDF">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.Keys">
            <summary>
            List of Keys
            </summary>
        </member>
        <member name="P:VaultAgent.Models.TransitKeyInfo.EncryptionMethod">
            <summary>
            The Encryption Method this key uses
            </summary>
        </member>
        <member name="M:VaultAgent.Models.TransitKeyInfo.ToString">
            <summary>
            Returns basic information about the key
            </summary>
            <returns></returns>
        </member>
        <member name="T:VaultAgent.SecretEngines.Entity">
            <summary>
            Represents a Vault identity entity object.  Entities are used to provide a single identifier for a group of ID's across different
            authentication backends that are all really the same thing.  For instance a user has an LDAP, GitHub and AWS credentials.  The ID allows
            us to combine all of those into a single object.
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.Entity.#ctor(System.String)">
            <summary>
            Constructor for a Vault Entity.
            </summary>
            <param name="entityName">Name of the Entity</param>
        </member>
        <member name="M:VaultAgent.SecretEngines.Entity.#ctor">
            <summary>
            This constructor should only be used by the JSON Backend.  Use the parameter constructor for creation of new entities
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.Entity.Aliases">
            <summary>
            Other Names for this Entity.  See Vault Documentation for Details
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.Entity.CreationTime">
            <summary>
            When this entity was created.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.Entity.DirectGroupIds">
            <summary>
            See Vault Documentation for Details
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.Entity.IsDisabled">
            <summary>
            If this Entity is disabled. Disabled Entities tokens cannot be used.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.Entity.GroupIds">
            <summary>
            See Vault Documentation for Details
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.Entity.Id">
            <summary>
            The ID of this Entity
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.Entity.InheritedGroupIds">
            <summary>
            See Vault Documentation for Details
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.Entity.LastUpdateTime">
            <summary>
            Last time this Entity was updated
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.Entity.MergedEntityIds">
            <summary>
            See Vault Documentation for Details
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.Entity.Metadata">
            <summary>
            Additional information to associate with this Entity
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.Entity.Name">
            <summary>
            Name of this Entity
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.Entity.Policies">
            <summary>
            Policies to be assigned to this Entity
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.Entity.ShouldSerializeId">
            <summary>
            We Serialize the ID if it contains a valid value.
            <remarks>This prevents us from sending the ID if it was initialized to empty in the C# class constructor (ie. this is a new entity not yet saved to Vault.</remarks>
            </summary>
            <returns></returns>
        </member>
        <member name="T:VaultAgent.SecretEngines.EntityAlias">
            <summary>
            Represents a Vault Alias to an Entity
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.EntityAlias.CanonicalId">
            <summary>
            The Entity ID this Alias belongs to.  
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.EntityAlias.RelatedEntityID">
            <summary>
            The Entity ID this Alias belongs to.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.EntityAlias.CreationTime">
            <summary>
            When this alias was created
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.EntityAlias.Id">
            <summary>
            The Guid ID of this alias.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.EntityAlias.LastUpdateTime">
            <summary>
            When this Alias was last changed.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.EntityAlias.MergedFromCanonicalIds">
            <summary>
            A list of Entity ID's that were merged into this Alias.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.EntityAlias.Metadata">
            <summary>
            Additional Information that is associated with this Entity
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.EntityAlias.MountAccessor">
            <summary>
            The Accessor ID of the Mount to which the Alias belongs to
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.EntityAlias.MountPath">
            <summary>
            The Mount Path
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.EntityAlias.MountType">
            <summary>
            The Type of Mount
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.EntityAlias.Name">
            <summary>
            Name of this Entity Alias
            </summary>
        </member>
        <member name="T:VaultAgent.SecretEngines.IdentitySecretEngine">
            <summary>
            A Vault Identity Secret Engine.
            <para>https://www.vaultproject.io/docs/secrets/identity/index.html</para>
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.IdentitySecretEngine.#ctor(VaultAgent.VaultAgentAPI)">
            <summary>
            Constructor.  Initializes the connection to Vault Identity Store.  Store has a fixed mounting location and name.
            </summary>
            <param name="vaultAgentAPI">The Vault API Agent object that contains connectivity information for establishing a connection to Vault</param>
        </member>
        <member name="M:VaultAgent.SecretEngines.IdentitySecretEngine.SaveEntity(VaultAgent.SecretEngines.Entity)">
            <summary>
            Saves the given entity to the Database.  If an Entity ID is provided it will update the entry.  Otherwise a new entity will be
            created.  It returns Null if the save failed for some reason.  Otherwise returns an Entity object.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.IdentitySecretEngine.ReadEntity(System.Guid)">
            <summary>
            Reads the requested Entity from the Vault.  Returns Entity object on success.
            <para>Throws [VaultInvalidPathException] if the entity was not found.</para>
            </summary>
            <param name="id">The GUID ID value of the entity to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.IdentitySecretEngine.ReadEntity(System.String)">
            <summary>
            Reads the requested Entity from the Vault.  Returns Entity object on success.
            <para>Throws [VaultInvalidPathException] if the entity was not found.</para>
            </summary>
            <param name="entityName">The name of the entity to read.</param>
            <returns>Entity object</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.IdentitySecretEngine.DeleteEntity(System.Guid)">
            <summary>
            Deletes an Entity and all of it's associated aliases.  Returns True if successful.  Will also return True if the ID passed in does not
            exist in the Vault Database.
            </summary>
            <param name="id">The Id of the entity to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.IdentitySecretEngine.DeleteEntity(System.String)">
            <summary>
            Deletes an Entity and all of it's associated aliases.  Returns True if successful.  Will also return True if the name passed in does not
            exist in the Vault Database.
            </summary>
            <param name="entityName">The name of the entity to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.IdentitySecretEngine.ListEntitiesByName">
            <summary>
            Lists all the entities by name.
            </summary>	
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.IdentitySecretEngine.ListEntitiesByID">
            <summary>
            Lists the Entities by ID value
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.IdentitySecretEngine.MergeEntities(System.String,System.String[])">
            <summary>
            Merges Entities Together.  This is not Implemented at this time.
            </summary>
            <param name="idToMergeTo"></param>
            <param name="entityIDsToMerge"></param>
        </member>
        <member name="M:VaultAgent.SecretEngines.IdentitySecretEngine.SaveAlias(System.Guid,System.String,System.String)">
            <summary>
            Creates a new alias for an Entity object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.IdentitySecretEngine.ReadAlias(System.Guid)">
            <summary>
            Reads the alias with the associated ID from the Identity store.  Returns an EntityAlias of the read object.
            <para>[VaultInvalidDataPath] - returns this exception if it could not find the requested value.</para>
            </summary>
            <param name="aliasID"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.IdentitySecretEngine.UpdateAlias(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Updates the given Alias (ID) with the specified mountAccessor and aliasName.
            </summary>
            <param name="aliasID">The alias ID to be updated with new values.</param>
            <param name="entityID">The ID of the entity to which this Alias belongs.</param>
            <param name="mountAccessor">The authentication backend mount accessor the alias belongs to.</param>
            <param name="aliasName">Name of the authentication backend user to associate with this alias.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.IdentitySecretEngine.DeleteAlias(System.Guid)">
            <summary>
            Deletes an EntityAlias.  Returns true on success.
            </summary>
            <param name="id">The Id of the entityAlias to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.IdentitySecretEngine.ListAliases">
            <summary>
            Returns a List of Entity Aliasa
            </summary>
            <returns></returns>
        </member>
        <member name="T:VaultAgent.SecretEngines.KeyValue2.IKV2Secret">
            <summary>
            Interface for a KV2Secret Object functionality that derived objects must implement
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.IKV2Secret.Name">
            <summary>
            Name of the Secret
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.IKV2Secret.Path">
            <summary>
            Path where the Secret should be placed
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.IKV2Secret.FullPath">
            <summary>
            Returns the Full path and name of the secret, so path/path/path/secretName
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.IKV2Secret.WasReadFromVault">
            <summary>
            If true then this secret was read from Vault, versus being created in C#
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.IKV2Secret.Attributes">
            <summary>
            The Attributes of the secret.  These are the names and values that are being stored in this secret.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.IKV2Secret.Metadata">
            <summary>
            Additional data that should be stored in this secret
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.IKV2Secret.CreatedTime">
            <summary>
            When the secret was created
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.IKV2Secret.DeletionTime">
            <summary>
            When the secret was deleted.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.IKV2Secret.IsDestroyed">
            <summary>
            If true then the secret has been permanently deleted from Vault
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.IKV2Secret.Version">
            <summary>
            Version number of this iteration of the secret, if using versioning. You should NEVER SET this property.  It is settable because the engine needs to update it.
            </summary>
        </member>
        <member name="T:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1">
            <summary>
            Abstract class for a KeyValue 2 Secret object. 
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.#ctor">
            <summary>
            Creates a new empty secret
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.#ctor(System.String,System.String)">
            <summary>
            Creates a new secret with the specified Name (Path)
            </summary>
            <param name="secretName">The name of the secret.</param>
            <param name="path">The path to the secret to be stored.  apps/appA/config   apps/appA is the path.</param>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.Name">
            <summary>
            The name of the secret.  In Vault terminology this is the very last part of the secret path.  So if a secret is stored at
            app/AppA/username  then the secret name would be username and the secret path would be app/AppA.  
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.Path">
            <summary>
            The path where the secret should be stored.  So if a secret is stored at app/AppA/username then the secret path would be app/AppA.
            Note:  All leading and trailing slashes are removed from the passed in value.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.FullPath">
            <summary>
            Returns the FullPath to the Secret.  The Fullpath is the path plus the Name of the secret.  So, Path1/path2/path3/secretName
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.WasReadFromVault">
            <summary>
            Returns True if the Secret was read from Vault, False if it was created outside of Vault.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.Attributes">
            <summary>
            The actual values that should be saved in the secret. 
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.Metadata">
            <summary>
            MetaData associated with the secret.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.CreatedTime">
            <summary>
            When the secret was actually saved to the Vault data store.  
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.DeletionTime">
            <summary>
            When this particular secret version was deleted from the Vault data store.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.IsDestroyed">
            <summary>
            Boolean - Whether this particular secret version is soft deleted or destroyed.  True means this secret data cannot be undeleted.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.Version">
            <summary>
            The version number of this particular secret.  Is > 0 if the secret was read from the Vault.  Is zero if this object was created in application.
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.GetParentPath">
            <summary>
            Returns the Path that this secret belongs to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.Equals(System.Object)">
            <summary>
            Determines if 2 KV2Secrets are the same.  Same is defined as: same name, path, number of attributes, and same attribute names and values.
            Does not evaluate any metadata or Version attributes.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.op_Equality(VaultAgent.SecretEngines.KeyValue2.KV2SecretBase{`0},VaultAgent.SecretEngines.KeyValue2.KV2SecretBase{`0})">
            <summary>
            Equality == 
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.Compare``1(``0,``0)">
            <summary>
            Compares 2 objects to see if equal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.op_Inequality(VaultAgent.SecretEngines.KeyValue2.KV2SecretBase{`0},VaultAgent.SecretEngines.KeyValue2.KV2SecretBase{`0})">
            <summary>
            Not Equal comparison
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.GetHashCode">
            <summary>
            Returns the hash code of the secret which is the FullPath
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.Clone">
            <summary>
            Clones the secret to a new secret.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValue2.KV2SecretBase`1.CompareTo(`0)">
            <summary>
            Implements the CompareTo function using the FullPath as the comparison
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:VaultAgent.SecretEngines.KeyValue2.KV2VaultReadSaveReturnObj">
            <summary>
            This class represents data that Vault returns on certain KV2 Secret Engine functions, such as Read and Save Secret.
            It mostly consists of TimeStamps, a Destroyed Flag and the Version that was operated on.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.KV2VaultReadSaveReturnObj.CreatedTime">
            <summary>
            When this particular secret version was created.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.KV2VaultReadSaveReturnObj.DeletionTime">
            <summary>
            When this particular secret version was deleted.  Note, you will need to case the Get to DateTimeOffset, since the property accepts DateTimeOffset Nullable
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.KV2VaultReadSaveReturnObj.Destroyed">
            <summary>
            Boolean - Whether this particular secret version is soft deleted.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValue2.KV2VaultReadSaveReturnObj.Version">
            <summary>
            The version number of this particular secret version.
            </summary>
        </member>
        <member name="T:VaultAgent.SecretEngines.KV2.KV2Secret">
            <summary>
            Represents a secret read from the Vault.  Secrets can have zero to many attributes which are just Key Value Pairs of a name and some data value.
            However, a secret without at least one attribute is not a secret, for the attributes are where the value for the secret is retrieved from.  
            Important is that when saving a secret, you must save it with all it's attributes or else any that are missing on the save will be removed from 
            the vault.  So, if upon reading a secret it has attributes of canDelete:True and connection:db1 and you save it, but the only attribute in the 
            list upon save is connection:db1 then canDelete will no longer exist after the save.  
            
            Therefore it is best to read the secret, make changes to any existing attributes and then add any new ones, then save it.
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2.KV2Secret.#ctor">
            <summary>
            Creates a new KV2Secret object
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2.KV2Secret.#ctor(System.String,System.String)">
            <summary>
            Creates a new KV2Secret object with the provided name and path/
            </summary>
            <param name="secretName"></param>
            <param name="path"></param>
        </member>
        <member name="T:VaultAgent.SecretEngines.KV2.KV2SecretEngineSettings">
            <summary>
            Represents a Vault Key Value Backend Version 2 settings object.
            </summary>
        </member>
        <member name="F:VaultAgent.SecretEngines.KV2.KV2SecretEngineSettings.CASRequired">
            <summary>
            True if Check and Set operations are mandated to use version number
            </summary>
        </member>
        <member name="F:VaultAgent.SecretEngines.KV2.KV2SecretEngineSettings.MaxVersions">
            <summary>
            Maximum number of versions that can be stored for a particular secret.  Defaults to 10.
            </summary>
        </member>
        <member name="T:VaultAgent.SecretEngines.KV2.SecretMetaDataInfo.KV2SecretMetaDataInfo">
            <summary>
            Class used to hold a Key Value 2 Secret's metadata or information about the secret that Vault Stores.  Mostly Timestamps and Version Info
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.SecretMetaDataInfo.KV2SecretMetaDataInfo.CasRequired">
            <summary>
            Whether Check and Set is required during Secret Updates.  Check And Set determines if a secret can be overwritten always, never, or only if the current version matches the version number passed in.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.SecretMetaDataInfo.KV2SecretMetaDataInfo.CreatedTime">
            <summary>
            Date and time that this version was created at.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.SecretMetaDataInfo.KV2SecretMetaDataInfo.CurrentVersion">
            <summary>
            The Current version of this secret
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.SecretMetaDataInfo.KV2SecretMetaDataInfo.MaxVersions">
            <summary>
            Maximum number of versions to keep of this particular secret
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.SecretMetaDataInfo.KV2SecretMetaDataInfo.OldestVersion">
            <summary>
            What the oldest version number of this secret is
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.SecretMetaDataInfo.KV2SecretMetaDataInfo.UpdatedTime">
            <summary>
            The data and time this secret was last updated
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.SecretMetaDataInfo.KV2SecretMetaDataInfo.Versions">
            <summary>
            All of the MetaData for the current versions.
            </summary>
        </member>
        <member name="T:VaultAgent.SecretEngines.KV2.SecretMetaDataInfo.MetaDataVersion">
            <summary>
            The MetaData Related Information in regards to the particular version of the secret
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.SecretMetaDataInfo.MetaDataVersion.CreatedTime">
            <summary>
            The time this version was created
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.SecretMetaDataInfo.MetaDataVersion.DeletionTime">
            <summary>
            The time this was Deleted
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.SecretMetaDataInfo.MetaDataVersion.Destroyed">
            <summary>
            Whether this version has been permanently deleted or not.
            </summary>
        </member>
        <member name="T:VaultAgent.SecretEngines.KV2.KV2SecretWrapper`1">
            <summary>
            The KV2SecretWrapper represents a Secret Container object that presents all the information Vault returns in regards to a secret.  
            Much of the info is just Informational, but some such as the version saved, etc is of critical nature.
            The main secret data is stored in the KV2Secret object.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.KV2SecretWrapper`1.Secret">
            <summary>
            Gets or sets the actual secret object.  This is a shortcut for going to obj.data.secretobj.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.KV2SecretWrapper`1.SecretAttributes">
            <summary>
            Accesses the attributes of the Secret.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.KV2SecretWrapper`1.Version">
            <summary>
            The version of the current key.  Versions are numerically increasing
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2.SecretReadReturnObjData`1.#ctor">
            <summary>
            Default Constructor used by JSONConverter.
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2.SecretReadReturnObjData`1.#ctor(System.Boolean)">
            <summary>
            Constructor used when this object is being created manually, vs populated thru JSON Converter.
            </summary>
            <param name="manualCreation"></param>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.SecretReadReturnObjData`1.SecretObj">
            <summary>
            The actual secret object - this is what most callers want.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KV2.SecretReadReturnObjData`1.Metadata">
            <summary>
            The metadata - such as creation times, etc for this particular secret object.
            </summary>
        </member>
        <member name="T:VaultAgent.SecretEngines.Constants">
            <summary>
            Some Constants used by the KV2Secret Engine
            </summary>
        </member>
        <member name="F:VaultAgent.SecretEngines.Constants.Error_CAS_Set">
            <summary>
            Messages explaining the Error_CAS_Set
            </summary>
        </member>
        <member name="F:VaultAgent.SecretEngines.Constants.Error_CAS_InvalidVersion">
            <summary>
            Message explaining the Error_CAS_InvalidVersion
            </summary>
        </member>
        <member name="F:VaultAgent.SecretEngines.Constants.Error_CAS_SecretAlreadyExists">
            <summary>
            Message explaining the Error_CAS_SecretAlreadyExists error
            </summary>
        </member>
        <member name="T:VaultAgent.SecretEngines.KV2SecretEngine">
            <summary>
                This backend is for interfacing with the Vault secret Backend Version 2.0.
                One of the unique things is that there are different root mounts within the given backend depending on what you
                want to do.  So having
                a std BackEnd path does not really work with this class.  It generally builds the unique path in each member
                method.
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.#ctor(System.String,System.String,VaultAgent.VaultAgentAPI)">
            <summary>
                Constructor.  Initializes the connection to Vault and stores the token.
            </summary>
            <param name="backendName">The name of the secret backend to mount.  This is purely cosmetic.</param>
            <param name="backendMountPoint">
                The actual mount point that the secret is mounted to.  Exclude and prefix such as /v1/
                and exclude trailing slash.
            </param>
            <param name="vaultAgentAPI">The Vault API Agent Object that contains connectivity information for authenticating and connecting to the Vault</param>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.DeleteSecretVersion(System.String,System.Int32)">
            <summary>
                Deletes the version of the secret requested - or the most recent version if version parameter is zero.
            </summary>
            <param name="secretPath">The name of the secret to delete.</param>
            <param name="version">The version to delete.  Defaults to zero which is the most recent or current version of the key.</param>
            <returns>True if successful.  False otherwise.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.DeleteSecretVersion(VaultAgent.SecretEngines.KeyValue2.IKV2Secret,System.Int32)">
            <summary>
                Deletes the version of the secret requested - or the most recent version if version parameter is zero.
                <para> Set secretVersion parameter as follows:</para>
                <para>  (Default) set to 0 to delete the most recent version.</para>
                <para>  Set to -1 to use the version number specified in the secret object as the version to delete.</para>
                <para>  Set to any positive number to delete that specific version from the Vault Instance Store.</para>
            </summary>
            <param name="secretObj">The KV2Secret object to be deleted from the Vault</param>
            <param name="secretVersion">The version of the secret to delete.</param>
            <returns>True if successful.  False otherwise.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.DestroySecretCompletely(System.String)">
            <summary>
                Permanently destroys a secret, including all versions and metadata.
            </summary>
            <param name="secretNamePath">The name of the secret to delete</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.DestroySecretCompletely(VaultAgent.SecretEngines.KeyValue2.IKV2Secret)">
            <summary>
            Completely destroys a secret, removing all evidence of it from the Vault
            </summary>
            <param name="secretObj">The Secret Object to be permanently removed</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.DestroySecretVersion(System.String,System.Int32)">
            <summary>
                Permanently deletes a given secret version.  This is unable to be undone.
            </summary>
            <param name="secretNamePath">The secret name to be undeleted.</param>
            <param name="version">The specific version of the secret to be unnamed.</param>
            <returns>True if successful.  False otherwise.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.DestroySecretVersion(VaultAgent.SecretEngines.KeyValue2.IKV2Secret,System.Int32)">
            <summary>
            Permanently deletes the given secret.
            </summary>
            <param name="secretObj">The secret object to be deleted</param>
            <param name="version">The specific version of the secret to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.GetBackendConfiguration">
            <summary>
                Returns the configuration settings of the current KeyValue V2 secret store.
            </summary>
            <returns>KV2BackendSettings object with the values of the current configuration.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.GetSecretMetaData(System.String)">
            <summary>
                Reads the Secret Metadata for the KeyValue V2 secret.  This includes version information, and critical timestamps
                such as destroy, delete, create etc.
            </summary>
            <param name="secretNamePath">The path to the secret to get metadata on.</param>
            <returns>KV2SecretMetaDataInfo object</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.GetSecretMetaData(VaultAgent.SecretEngines.KeyValue2.IKV2Secret)">
            <summary>
                Returns the Secret MetaData Object Information for the provided Secret Object
            </summary>
            <param name="secretObj"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.ListSecretsAtPath(System.String,System.Boolean,System.Boolean)">
            <summary>
                Returns a list of secrets at a given path.  If the parameter includeFolderSecrets is true (default) then it will
                remove secret names with a trailing slash. This is generally what callers want.
            </summary>
            <param name="secretPath">
                The path "folder" to retrieve secrets for.  This may be the entire path including the name (if
                the secret has subfolders) or just a partial path.
            </param>
            <param name="includeFolderSecrets">
                If false (default) it will remove secrets that contain a trailing slash which in
                Vault indicates that this is a folder or parent to other secret objects
            </param>
            <param name="sorted">Whether the secrets should be sorted in alphabetical order</param>
            <returns>List of strings which contain secret names.</returns>
            <remarks>https://github.com/SlugEnt/VaultAPI/issues/3</remarks>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.ListSecretsAtPath(VaultAgent.SecretEngines.KeyValue2.IKV2Secret)">
            <summary>
            Lists all the children secrets of the provided Secret Object
            </summary>
            <param name="secretObj">The secret object that you wish to get a list of children of</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.ListSecretsSorted(System.String,System.Boolean)">
            <summary>
                Returns a list of secrets at a given path.  If the parameter includeFolderSecrets is true (default) then it will
                remove secret names with a trailing slash. This is generally what callers want.
            </summary>
            <param name="secretPath">
                The path "folder" to retrieve secrets for.  This may be the entire path including the name (if
                the secret has subfolders) or just a partial path.
            </param>
            <param name="includeFolderSecrets">
                If false (default) it will remove secrets that contain a trailing slash which in
                Vault indicates that this is a folder or parent to other secret objects
            </param>
            <returns>List of strings which contain secret names.</returns>
            <remarks>https://github.com/SlugEnt/VaultAPI/issues/3</remarks>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.ReadSecret``1(System.String,System.Int32)">
            <summary>
                Reads the secret from Vault.  It defaults to reading the most recent version.  Set secretVersion to non zero to
                retrieve a
                specific version.
                <para>Returns [VaultForbiddenException] if you do not have permission to read from the path.</para>
                <para>Returns the IKV2SecretWrapper if a secret was found at the location.</para>
                <para>Returns Null if no secret found at location.</para>
            </summary>
            <param name="secretPath">The Name (path) to the secret you wish to read.</param>
            <param name="secretVersion">The version of the secret to retrieve.  (Default) set to 0 to read most recent version. </param>
            <returns>IKV2Secret of the secret as read from Vault.  Returns null if there is no secret at that path.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.ReadSecret``1(``0,System.Int32)">
            <summary>
                Reads the specified secret from Vault.  It defaults to reading the most recent version of the secret.
                <para>Returns [VaultForbiddenException] if you do not have permission to read from the path.</para>
                <para>Returns the IKV2Secret if a secret was found at the location.</para>
                <para>Returns Null if no secret found at location.</para>
            </summary>
            <param name="secretObj">
                An existing IKV2Secret object that you wish to re-read.  The existing object will be deleted
                and replaced with the values for the new.
            </param>
            <param name="secretVersion">
                Version of the secret to retrieve.
                <para>  (Default) set to 0 to read most recent version.</para>
                <para>  Set to -1 to use the version number specified in the secret object.</para>
                <para>  Set to any positive number to read that specific version from the Vault Instance Store.</para>
            </param>
            <returns>IKV2Secret of the secret as read from Vault.  Returns null if there is no secret at that path.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.SaveSecret``1(``0,VaultAgent.Backends.KV2EnumSecretSaveOptions,System.Int32)">
            <summary>
                Saves the provided K2Secret object.  You must specify a save option and optionally what the current version of
                the secret is.  The KV2Secret object's version # will be updated on success with what the new version of the
                secret it.
                If the CAS setting is set on the backend then the following errors may be returned:
                <para></para>
                <para>Commonly Throws the Following Errors:</para>
                <para>
                    [VaultForbiddenException] - Errors with access.  The SpecifiedErrorCode field will be set to
                    EnumVaultExceptionCodes.PermissionDenied if token does not have
                    appropriate permissions to access the path.
                </para>
                <para>   [VaultInvalidDataException]</para>
                <para>
                    [SpecificErrorCode] = EnumVaultExceptionCodes.CheckAndSetMissing - You specified an invalid casSaveOption
                    (AlwaysAllow is not valid for backend with CAS Set)
                    or the currentVersion parameter was invalid.
                </para>
                <para>
                    [SpecificErrorCode] = EnumVaultExceptionCodes.CAS_SecretExistsAlready - You set the casSaveOption to
                    only allow save to succeed if the secret does not yet exist.
                </para>
                <para>
                    [SpecificErrorCode] = EnumVaultExceptionCodes.CAS_VersionMissing - The version you specified was
                    invalid.  It must be equal to the current version number of the secret.
                </para>
            </summary>
            <param name="secret">
                IKV2Secret object to be saved.  This must contain minimally the Name and the Path of the secret
                and one or more optional attributes.
            </param>
            <param name="casSaveOption">
                This must be set to the CAS option you desired:
                - OnlyIfKeyDoesNotExist = 0,
                - OnlyOnExistingVersionMatch = 1,
                - AlwaysAllow = 2  - Set to this value if the backend is not CAS enabled.  If CAS is enabled then this option will
                result in an error.
            </param>
            <param name="currentVersion">
                What the current version of the secret is.  Required if the backend is in CAS mode
                (Default mode).
            </param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.SetBackendConfiguration(System.UInt16,System.Boolean)">
            <summary>
                Configures the Key Value V2 backend.
            </summary>
            <param name="maxVersions">The maximum number of versions of a key to keep.  Defaults to 10.</param>
            <param name="casRequired">
                Check-And-Set parameter. If set to True then all writes (creates and updates) to keys will need to have the CAS
                parameter specified.
                See the Update and Create methods for details about the CAS setting. </param>
                <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.TryReadSecret``1(System.String,System.Int32)">
            <summary>
                Attempts to read a secret if it exists.  Returns a tuple value (bool success, IKV2Secret secret) as follows:
                <para>If secret was found the first value is True and the 2nd value is the IKV2Secret that was read.</para>
                <para>If not found OR YOU do not have permission, the first value is False and the second value is null.</para>
            </summary>
            <param name="secretPath">The path to the secret to check for existence and retrieve if it does exist.</param>
            <param name="secretVersion">The secret version to be read.  0 for current.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.TryReadSecret``1(System.String,System.String,System.Int32)">
            <summary>
                Attempts to read a secret if it exists.  Returns a tuple value (bool success, T secret) as follows:
                <para>Returns [VaultForbiddenException] if you do not have permission to read from the path.</para>
                <para>If secret was found the first value is True and the 2nd value is the IKV2Secret that was read.</para>
                <para>If not found, the first value is False and the second value is null.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="secretName">The name of the secret to retrieve</param>
            <param name="secretParentPath">The path that contains the secret</param>
            <param name="secretVersion">If you want a specific version of the secret, specify it here.  Otherwise it defaults to current version.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.TryReadSecret``1(``0,System.Int32)">
            <summary>
                Attempts to read a secret if it exists.  Returns a tuple value (bool success, IKV2Secret secret) as follows:
                <para>Returns [VaultForbiddenException] if you do not have permission to read from the path.</para>
                <para>If secret was found the first value is True and the 2nd value is the IKV2Secret that was read.</para>
                <para>If not found, the first value is False and the second value is null.</para>
            </summary>
            <param name="secretObj">The secret object that should be Read.</param>
            <param name="secretVersion">
                Version of the secret to retrieve.
                <para>  (Default) set to 0 to read most recent version.</para>
                <para>  Set to -1 to use the version number specified in the secret object.</para>
                <para>  Set to any positive number to read that specific version from the Vault Instance Store.</para></param>
                <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.UndeleteSecretVersion(System.String,System.Int32)">
            <summary>
                Undeletes a given secret AND version.
            </summary>
            <param name="secretsecretNamePath">The secret name and path to be undeleted.</param>
            <param name="version">The specific version of the secret to be unnamed.</param>
            <returns>True if successful.  False otherwise.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.UndeleteSecretVersion(VaultAgent.SecretEngines.KeyValue2.IKV2Secret,System.Int32)">
            <summary>
            Undeletes the specified version of a secret
            </summary>
            <param name="secretObj">The secret object that should be undeleted</param>
            <param name="version">The specific version number to be undeleted.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.UpdateSecretSettings(System.String,System.UInt16,System.Boolean)">
            <summary>
                Allows one to change 2 metadata parameters of a secret - Max # of versions and the CAS setting.  Represents Vaults
                Update MetaData function for a secret.
            </summary>
            <param name="secretsecretNamePath">The secret to be saved.  Includes the entire secret Path plus the Name.</param>
            <param name="maxVersions">The maximum number of versions of this key to keep.</param>
            <param name="casRequired">Boolean determining if the CAS parameter needs to be set on save/update of a key.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KV2SecretEngine.UpdateSecretSettings(VaultAgent.SecretEngines.KeyValue2.IKV2Secret,System.UInt16,System.Boolean)">
            <summary>
            Updates the IKV2Secret objects settings based upon the parameters passed in.
            </summary>
            <param name="secretObj">The Secret Object to be updated</param>
            <param name="maxVersions">How many versions of the secret that should be kept</param>
            <param name="casRequired">Whether CAS is required or not</param>
            <returns></returns>
        </member>
        <member name="T:VaultAgent.SecretEngines.KeyValueSecret">
            <summary>
            Represents a KeyValue Version 1 secret read from the Vault.  Secrets can have many attributes which are just Key Value Pairs of a name and some data value.
            Important is that when saving a secret, you must save it with all it's attributes or else any that are missing on the save will be removed from 
            the vault.  So, if upon reading a secret it has attributes of canDelete:True and connection:db1 and you save it, but the only attribute in the 
            list upon save is connection:db1 then canDelete will no longer exist after the save.  
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecret.#ctor">
            <summary>
            Constructor for a Key Value Secret - Version 1.  It is recommended to use a KV2Secret instead.
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecret.#ctor(System.String)">
            <summary>
            Constructor for a Key Value Secret - Version 1.  It is recommended to use a KV2Secret instead.
            </summary>
            <param name="nameAndPath">The full path and name of the secret to be built</param>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecret.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for a Key Value Secret - Version 1.  It is recommended to use a KV2Secret instead.
            </summary>
            <param name="nameAndPath">The full path and name of the secret to be built</param>
            <param name="refreshInterval">How often this secret should be refreshed</param>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValueSecret.Path">
            <summary>
            The full path including the secret name, of the secret to retrieve.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValueSecret.RefreshInterval">
            <summary>
            Value is Seconds.  A suggestion on how often programs using this secret should perform a refresh to check for new values.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValueSecret.Attributes">
            <summary>
            The actual values that should be saved in the secret. 
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.KeyValueSecret.RefreshIntervalInMinutes">
            <summary>
            Returns the Refresh Interval in Minutes.
            </summary>
        </member>
        <member name="T:VaultAgent.SecretEngines.KeyValueSecretEngine">
            <summary>
            The Vault Key Value Version 1 Secret Backend.  Should prefer to use the KV2SecretEngine
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.#ctor(System.String,System.String,VaultAgent.VaultAgentAPI)">
            <summary>
            Constructor.  Initializes the connection to Vault and stores the token.
            </summary>
            <param name="backendName">The name of the secret backend to mount.  This is purely cosmetic.</param>
            <param name="backendMountPoint">The actual mount point that the secret is mounted to.  Exclude and prefix such as /v1/ and exclude trailing slash.</param>
            <param name="vaultAgentAPI">The VaultAPI_Http object that should be used to make all Vault API calls with.</param>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.CreateSecret(VaultAgent.SecretEngines.KeyValueSecret)">
            <summary>
            Creates the given Secret, ONLY if there is not already a secret by this path already.  Returns NULL if secret already exists.  Returns Secret object otherwise.
            </summary>
            <param name="secret">Secret object to create in Vault.</param>
            <returns>new KeyValueSecret object if it was created in Vault, NULL if it already exists.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.CreateSecret(System.String)">
            <summary>
            Creates a secret at the path specified, ONLY if there is not already a secret there.  Returns NULL if there is already a secret there.  Returns a 
            Secret object if it was newly created.
            </summary>
            <param name="secretPath">Where to create the secret at.</param>
            <returns>Secret object if it was created.  Null if it already exists.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.CreateOrUpdateSecret(System.String)">
            <summary>
            Creates a secret if it does not exist, updates if it does.  Returns a Secret object read from the Vault. It will return NULL if secret was not created successfully.
            This is the equivalent of calling CreateOrUpdateSecretAndReturn along with ReadSecret.
            </summary>
            <param name="secretPath">The name or full path of the secret.</param>
            <returns>Secret object if successful.  Null otherwise</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.CreateOrUpdateSecret(VaultAgent.SecretEngines.KeyValueSecret)">
            <summary>
            Creates a secret if it does not exist, updates if it does.  Returns a Secret object read from the Vault. It will return NULL if secret was not created successfully.
            This is the equivalent of calling CreateOrUpdateSecretAndReturn along with ReadSecret.
            </summary>
            <param name="secret">Secret object that contains the secret path to be created.</param>
            <returns>Secret object populated with the Secret info as read from the Vault.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.CreateOrUpdateSecretAndReturn(System.String)">
            <summary>
            Creates a secret if it does not exist, updates if it does.  Returns true if successful, false otherwise.
            </summary>
            <param name="secretPath">The name or full path of the secret.</param>
            <returns>True if successful in creating, false otherwise.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.CreateOrUpdateSecretAndReturn(VaultAgent.SecretEngines.KeyValueSecret)">
            <summary>
            Creates a secret if it does not exist, updates if it does.  Returns true if successful, false otherwise.
            </summary>
            <param name="secret">The Secret object with at least the secret path populated.</param>
            <returns>True if successful in creating the secret in Vault, false otherwise.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.ReadSecret(System.String)">
            <summary>
            Reads the secret that matches the secretPath passed in and returns a Secret object.  Returns NULL if the secret was not found.
            </summary>
            <param name="secretPath">The full path to the secret.  Also known as the secret's full name.</param>
            <returns>Secret object populated with the secret's attributes if successful.  Null if not successful.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.ReadSecret(VaultAgent.SecretEngines.KeyValueSecret)">
            <summary>
            Reads the secret for the Secret passed in and returns a new KeyValueSecret object.  Returns NULL if the secret was not found.
            </summary>
            <param name="secret">A Secret Object with at least the secret Path specified.</param>
            <returns>Secret Object as read from Vault.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.IfExists(VaultAgent.SecretEngines.KeyValueSecret)">
            <summary>
            Determines if a secret exists in the Vault Backend.  True if it exists, False otherwise.  Note: If you are checking for existince prior to reading the secret, then it
            is better to just call ReadSecret and check for a null return value to see if it exists or not.  IfExists calls ReadSecret to perform its logic!
            </summary>
            <param name="secret"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.IfExists(System.String)">
            <summary>
            Determines whether a given secret exists or not.
            </summary>
            <param name="secretPath">The name of the secret to determine if it exists.</param>
            <returns>True if the secret exists.  False if it was not found.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.ListSecrets(System.String)">
            <summary>
            List all the secrets immediately in the secret path provided.  Note:  This does not list the secret attributes only the secrets themselves.
            Because of the way Vault identifies secrets and secrets with sub items (folders), a secret that contains a sub item will be listed 2x in the output.
            Once with just the secret name and once with the folder identifier.  so:  (sublevel and sublevel/). 
            </summary>
            <param name="secretPath">Path that you wish to use as parent to list secrets from.  Only lists immediate children of this secret path.</param>
            <returns>List of strings of the secret names.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.ListSecrets(VaultAgent.SecretEngines.KeyValueSecret)">
            <summary>
            List all the secrets immediately in the secret path provided.  Note:  This does not list the secret attributes only the secrets themselves.
            Because of the way Vault identifies secrets and secrets with sub items (folders), a secret that contains a sub item will be listed 2x in the output.
            Once with just the secret name and once with the folder identifier.  so:  (sublevel and sublevel/). 
            </summary>
            <param name="secret">Secret that you wish to use as parent to list secrets from.  Only lists immediate children of this secret.</param>
            <returns>List of strings of the secret names.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.UpdateSecret(VaultAgent.SecretEngines.KeyValueSecret)">
            <summary>
            Updates an already existing secret OR will create it.  Just another name for CreateOrUpdateSecret.
            </summary>
            <param name="secret">Secret that should be updated.</param>
            <returns>Secret Object with the updated values.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.DeleteSecret(VaultAgent.SecretEngines.KeyValueSecret)">
            <summary>
            Deletes the Vault secret at the path specified.  Returns True AND sets the vault path to nothing and deletes the Secret's attributes, if successful.  
            Returns False and does not delete the Secret object if it failed to delete for some reason.  
            </summary>
            <param name="secret">True for success.  False otherwise.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.KeyValueSecretEngine.DeleteSecret(System.String)">
            <summary>
            Deletes the Vault secret at the secret path specified.  Returns true for success, false otherwise.
            </summary>
            <param name="secretPath">The path to the Vault secret to permanently delete.</param>
            <returns>True for success, False otherwise.</returns>
        </member>
        <member name="T:VaultAgent.SecretEngines.TransitSecretEngine">
            <summary>
            The transit secrets engine handles cryptographic functions on data in-transit. Vault doesn't store the data sent to the secrets engine.
            It can also be viewed as "cryptography as a service" or "encryption as a service". The transit secrets engine can also sign and verify data;
            generate hashes and HMACs of data; and act as a source of random bytes.
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.#ctor(System.String,System.String,VaultAgent.VaultAgentAPI)">
            <summary>
            Constructor.  Initializes the connection to Vault and stores the token.
            </summary>
            <param name="backendMountName">The name of the transit backend to mount.  For example for a mount at /mine/transitA use mine/transitA as value.</param>
            <param name="backendMountPath">The path to the Transit Backend mountpoint.</param>
            <param name="vaultAgentAPI">The Vault Agent API object that contains conenctivity information and a Token with the permissions required to access the Transit Engine</param>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.CreateEncryptionKey(System.String,System.Boolean,System.Boolean,VaultAgent.Backends.TransitEnumKeyType,System.Boolean,System.Boolean)">
            <summary>
            Creates an encryption key with the specified name.  Since encryption key parameters cannot be changed after initial creation AND vault does not
            return an error telling you a key already exists - it just returns Success, it is best to call the IfKeyExists function first to make sure the
            key you want to create will be able to be created with the values you want. 
            </summary>
            <param name="keyName">This is the actual name of the encryption key.</param>
            <param name="canBeExported">Boolean:  If you want to be able to export the key then set this to True.</param>
            <param name="allowPlainTextBackup">Boolean.  If you want to be able to perform a plain text backup of the key, set to True.</param>
            <param name="keyType">The type of encryption key to use.  Best choices are one of the RSA keys or the AES key.</param>
            <param name="enableKeyDerivation">Enables Key Derivation.  Key derivtion requires that an encryption context must be supplied with each encrypt operation.</param>
            <param name="enableConvergentEncryption">Enables Convergent Encryption.  Convergent encryption means that the same plaintext value will always result in the
            same encrypted ciphertext.</param>
            <returns>True if successful.  However, it could also mean the key already exists, in which case the parameters you set here may not be what the key 
            is set to.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.CreateEncryptionKey(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates an Encryptyion key with the specified name.  This one allows greater latitude in defining the parameters.  But there is no parameter
            validation or checking to make sure names are correct or values are correct.  It is recommended to use the one with command line parameters.
            </summary>
            <param name="keyName">This is the actual name of the encryption key.</param>
            <param name="createParams">A Dictionary in the Dictionary [string,string] format.  You must have supplied the values for the dictionary
            in the calling routing.  The Key should match the Vault API keyname and the Value should be the value in the format vault is expecting.</param>
            <returns>True if the key is successfully created.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.ReadEncryptionKey(System.String)">
            <summary>
            Reads the Encrypted Key specified
            </summary>
            <param name="keyName">The name of the key to read</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.IfExists(System.String)">
            <summary>
            Returns true or false if a given key exists.
            </summary>
            <param name="keyName">Name of the key you want to validate if it exists.</param>
            <returns>True if key exists.  False if it does not.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.ListEncryptionKeys">
            <summary>
            Returns a List of Encryption keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.EncryptToVault(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Internal routine that makes the actual Vault API call using the passed in Parameters as input values.
            </summary>
            <param name="keyName">The encryption key to use to encrypt data.</param>
            <param name="contentParams">Dictionary of string value pairs representing all the input parameters to be sent along with the request to the Vault API.</param>
            <returns>A List of the encrypted value(s). </returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.Encrypt(System.String,System.String,System.String,System.Int32)">
            <summary>
            Calls the Vault Encryption API.  
             - This version only supports a single data element for encryption at a time.  See the EncryptBulk method for enabling encrypting more than
             one value during a single API call.  
             - It always encrypts with the latest version of the key, unless you have specified the KeyVersion parameter > 0.
            </summary>
            <param name="keyName">The name of the encryption key to use to encrypt the data.</param>
            <param name="rawStringData">The data to be encrypted in string format.  This should not be base64 encoded.  This routine takes care of that for you.</param>
            <param name="keyDerivationContext"></param>
            <param name="keyVersion">Version of the key that should be used to encrypt the data.  The default (0) is the latest version of the key.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.EncryptBulk(System.String,System.Collections.Generic.List{VaultAgent.Backends.TransitBulkItemToEncrypt},System.Int32)">
            <summary>
            Encrypts multiple items at one time.  It is expected that the caller has maintained an order list of the items to encrypt.  The encrypted 
            results will be returned to the caller in a List in the exact same order they were sent.  
            </summary>
            <param name="keyName">The encryption key to use to encrypt the values.</param>
            <param name="bulkItems">The list of items to be encrypted.  Note that you may supply both the item to be encrypted and optionally the context 
            that goes along with it, if using contextual encryption.</param>
            <param name="keyVersion">Optional numberic value of the key to use to encrypt the data with.  If not specified it defaults to the latest version 
            of the encryption key.</param>
            <returns>TransitEncryptionResultsBulk which is a list or the encrypted values.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypts a single encrypted value.  If the keys supports convergent or derived encryption then you must supply the keyDerivationContext param.
            </summary>
            <param name="keyName">Name of the encryption key to use to decrypt.</param>
            <param name="encryptedData">The encrypted value that you wish to have decrypted.</param>
            <param name="keyDerivationContext">The context value that is required to delete a convergent encrypted item.</param>
            <returns>TransitDecryptedItem if the value was able to be successfully decrypted.
            Throws <VaultInvalidDataException> if unable to decrypt the item due to bad key or context value.</VaultInvalidDataException></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.DecryptBulk(System.String,System.Collections.Generic.List{VaultAgent.Backends.Transit.Models.TransitBulkItemToDecrypt},System.Int32)">
            <summary>
            Decrypts multiple items at one time.  It is expected that the caller has maintained an order list of the items to decrypt.  The decrypted 
            results will be returned to the caller in a List in the exact same order they were sent.  
            </summary>
            <param name="keyName">The encryption key to use to decrypt the values.</param>
            <param name="bulkItems">The list of items to be decrypted.  Note that you may supply both the item to be decrypted and optionally the context 
            that goes along with it, if using contextual encryption.</param>
            <param name="keyVersion">Optional numberic value of the key to use to deecrypt the data with.  If not specified it defaults to the latest version 
            of the encryption key.</param>
            <returns>TransitEncryptionResultsBulk which is a list or the deecrypted values.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.RotateKey(System.String)">
            <summary>
            Rotates the specified key.  All new encrypt operations will now use the new encryption key.  
            </summary>
            <param name="keyName">The name of the encryption ket to rotate.</param>
            <returns>True if successfull.  Will thrown an error with the reason if unsuccesful.  </returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.ReEncrypt(System.String,System.String,System.String,System.Int32)">
            <summary>
            Re-encrypts the currently encrypted data with the current version of the key.  This is a simplified way
            of upgrading the encryption for an element without have to call Decrypt and then Encrypt separately.
            </summary>
            <param name="keyName">The Encryption key to use to decrypt and re-encrypt the data</param>
            <param name="encryptedData">The currently encrypted data element that you want to have upgraded with the new encryption key.</param>
            <param name="keyDerivationContext">The context used for key derivation if the key supports that key derivation.</param>
            <param name="keyVersion">Version of the key to use.  Defaults to current version (0).</param>
            <returns>The data element encrypted with the version of the key specified.  (Default is latest version of the key).  Returns null if operation failed.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.ReEncryptBulk(System.String,System.Collections.Generic.List{VaultAgent.Backends.Transit.Models.TransitBulkItemToDecrypt},System.Int32)">
            <summary>
            Perform a re-encryption of multiple items at one time.  It is expected that the caller has maintained an order list separate from this list of the items 
            that need to be re-encrypted with newer encryption key. The encrypted results will be returned to the caller in a List in the exact same order they were sent.  
            </summary>
            <param name="keyName">The encryption key to use to encrypt the values.</param>
            <param name="bulkItems">The list of items that are currently encrypted that need to be re-encrypted with newer key.  If it is a derived context item then
            you need to make sure you supply the context along with each encrypted item.</param>
            <param name="keyVersion">Optional numeric value of the key version to use to encrypt the data with.  If not specified it defaults to the latest version 
            of the encryption key.</param>
            <returns>TransitEncryptionResultsBulk - which is a list or the encrypted values.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.UpdateKey(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Updates the configuration settings for the given key.  Use the TransitConstants KeyConfig... values for input to the inputParams Dictionary.
            Note: If PlainTextBackup or exportable are already True, you cannot set them to false.
            </summary>
            <param name="keyName">The encryption key to update configuration settings for.</param>
            <param name="inputParams">Dictionary of KeyValue string pairs that contain Vault config values and the value you want that config value to have.</param>
            <returns>TransitKeyInfo object with the current settings after Update.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.DeleteKey(System.String)">
            <summary>
            Deletes the given key.
            </summary>
            <param name="keyName">The key to delete.</param>
            <returns>True if deletion successful.
            False if the key does not allow deletion because its deletion_allowed config parameters is not set to true.
            Throws VaultInvalidDataException with message of "could not delete policy; not found.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.ExportKey(System.String)">
            <summary>
            Not Implemented
            </summary>
            <param name="keyName"></param>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.GenerateDataKey(System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Throws VaultInvalidDataException for a number of errors, including not supplying context for keys that require it.
            </summary>
            <param name="keyName">Name of the key that should be used to create this Data Key.</param>
            <param name="returnCipherAndPlainText">Boolean:  If true, the key returned will contain both the plaintext and cipher text for the key.  IF false, just the cipher is returned.</param>
            <param name="context">Optional:  the context value to encrypt with.  Required if Key supports convergent or Derived Encryption.</param>
            <param name="bits">128, 256 or 512.  Number of bits the key should have.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.BackupKey(System.String)">
            <summary>
            Returns a plaintext backup of the requested key.  Backups contains all configuration data and all keys of all versions along with the 
            HMAC key.  The TransitBackupRestoreItem can be used with the RestoreKey method to restore the given key.  Callers should check the 
            TransitBackupRestoreItem Success flag to determine if it worked and ErrorMsg to identify any errors if it did not.  The 2 most common
            errors are: Export is disabled and PlainTextBackup is disabled.  These need to be enabled on the key prior to backing up. 
            </summary>
            <param name="keyName">Name of the encryption key to backup.</param>
            <returns>TransitBackupRestoreItem containing the full backup of the key.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.RestoreKey(System.String,VaultAgent.Backends.Transit.Models.TransitBackupRestoreItem)">
            <summary>
            Restores the given key to the Vault.
            </summary>
            <param name="keyName">Name of encryption key that should be restored.</param>
            <param name="tbri">TransitBackupRestoreItem containing the backup value.</param>
            <returns>True if success.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.GenerateRandomBytes(System.Int32,System.Boolean)">
            <summary>
            Generates random bytes.  Can return data as string or Hexidecimal.  Note, Vault native function returns Base64-encoded.  This routine
            decodes it before returning to you.
            </summary>
            <param name="numBytes">Number of bytes you need.</param>
            <param name="hexOutputFormat">true if you want hexidecimal values, False if you want ascii</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.ComputeHash(System.String,VaultAgent.Backends.TransitEnumHashingAlgorithm,System.Boolean)">
            <summary>
            Returns the cryptographic hashing of given data using the specified algorithm.
            </summary>
            <param name="input">The data value you wish to have the hashing generated on.</param>
            <param name="hashing">The hashing algorithm to use.</param>
            <param name="hexOutputFormat">Boolean.  Set to true if you wish the hashing output to be returned in Hexadecimal format. False means Base64 format.</param>
            <returns>The hashing of the input data returned in either hexadecimal or Base64 format.</returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.GenerateHMAC">
            <summary>
             Not Implemented
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.SignData">
            <summary>
             Not Implemented
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.TransitSecretEngine.VerifySignedData">
            <summary>
            Not Implemented
            </summary>
        </member>
        <member name="T:VaultAgent.SecretEngines.VaultSecretEntry">
            <summary>
            Represents a "Smart" Vault Secret (KV2Secret) for KV2 Secret Engines.  This secret type can only be used with KV2SecretEngines that DO NOT
            support the Check and Set Operations.  There is a separate class VaultSecretEntryCAS for those secret types.
            While all of the functionality exposed by this class can be done with a combination of the
            KV2SecretEngine and the KV2SecretBase objects, it puts that functionality into a single class, that makes for much less lines of code and a
            much easier to work with functionality when it comes to moving a KV2Secret's information to and from the Vault.
            <para>The main add is a set of VSE_ methods that enable the reading, saving, deleting, getting info on the secret you are working with</para>
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntry.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntry.#ctor(VaultAgent.SecretEngines.KV2SecretEngine)">
            <summary>
            Constructs a VaultSecretEntry object Without CAS functionality
            </summary>
            <param name="secretEngine"></param>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntry.#ctor(VaultAgent.SecretEngines.KV2SecretEngine,System.String,System.String)">
            <summary>
            Constructs a VaultSecretEntry object Without CAS functionality
            </summary>
            <param name="secretEngine"></param>
            <param name="name">The Name of this secret</param>
            <param name="path">The Path of this secret</param>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntry.VSE_Save">
            <summary>
            Saves the object to the Vault
            </summary>
            <returns></returns>
        </member>
        <member name="T:VaultAgent.SecretEngines.VaultSecretEntryBase">
            <summary>
            Represents a "Smart" Vault Secret (KV2Secret).  While all of the functionality exposed by this class can be done with a combination of the
            KV2SecretEngine and the KV2SecretBase objects, it puts that functionality into a single class, that makes for much less lines of code and a
            much easier to work with functionality when it comes to moving a KV2Secret's information to and from the Vault.
            <para>The main add is a set of VSE_ methods that enable the reading, saving, deleting, getting info on the secret you are working with</para>
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.#ctor(VaultAgent.SecretEngines.KV2SecretEngine)">
            <summary>
            Constructor accepting the SecretEngine that this secret's Vault Operations (VSE) should be applied to.
            </summary>
            <param name="secretEngine">The KV2SecretEngine that this secret should operate with</param>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.#ctor(VaultAgent.SecretEngines.KV2SecretEngine,System.String,System.String)">
            <summary>
            Constructor accepting the SecretEngine that this secret's Vault Operations (VSE) should be applied to.
            </summary>
            <param name="secretEngine">The KV2SecretEngine that this secret should operate with</param>
            <param name="name">The Name of this secret</param>
            <param name="path">The Path of this secret</param>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.InitializeNew">
            <summary>
            Initializes this class' variables to initial values
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.BasePath">
            <summary>
            This is the base path to the Secret.  Since it may be necessary for a derived class to "compute" its path based upon one ore more properties this serves as the base
            Path Component
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.SetSecretPath">
            <summary>
            Any derived class that needs to alter the underlying KV2Secret's path should call this method and then override the ComputeSecretPath method in the derived class.
            The ComputeSecretPath method should then build what the path should be and then return it.
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.ComputeSecretPath">
            <summary>
            This method computes the entire path for the internal secret object.  Entire Path means the entire secret path, except the secret name itself.  There should be
            no trailing slash either.
            <para>This method is overridable and should be overridden in derived classes that need to compute the actual secret path based upon properties of the derived class</para>
            </summary>
            <returns></returns>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.SecretEngine">
            <summary>
            The Secret Engine that this secret will read from and save to.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.IsEngineDefined">
            <summary>
            Returns true if the Engine property has been initialized to a value.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.IsSecretInfoLoaded">
            <summary>
            Returns True if this secrets extended Information has been read from the Vault.  You must specifically request this thru the VSE_Info method
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.Info">
            <summary>
            The KV2SecretMetaData Information about this secret.  If it returns null, then you have not requested this information (Run VSE_Info).
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.Name">
            <summary>
            The Name of this Secret
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.Path">
            <summary>
            The Parent path of this secret.  Note, When setting this Path, the BasePath property is set to the value the caller set, then the actual path is computed based upon the ComputePath method.
            So, the value you set, could be different than the value you read back.
            <para>It is preferred that you set the Path thru the BasePath property, to ensure everything seems logical, end result is the same.</para>
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.FullPath">
            <summary>
            The full path to this secret (path + name)
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.WasReadFromVault">
            <summary>
            True if this secret's data was read from the Vault
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.Attributes">
            <summary>
            The Dictionary of items that this secret is storing.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.Metadata">
            <summary>
            Access to the Vault MetaData for this particular secret.  Each secret can have additional data stored with it.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.CreatedTime">
            <summary>
            When this secret was created.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.DeletionTime">
            <summary>
            When this secret was deleted
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.IsDestroyed">
            <summary>
            If this secret is currently destroyed.
            </summary>
        </member>
        <member name="P:VaultAgent.SecretEngines.VaultSecretEntryBase.Version">
            <summary>
            The Version of this secret.  This will be the version of this secret as it was last Read or Saved to Vault.  
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.VSE_Read">
            <summary>
            Reads this VSE's Vault Secret data from the Vault.  Returns True on Success.  Note, this will overwrite any existing values that exist
            in this VSE's secret object that have not been saved to the Vault.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.VSE_ReadVersion(System.Int32)">
            <summary>
            Reads the requested version of this VSE's Vault Secret data from the Vault.  Returns True on Success.  Note, this will overwrite any existing values that exist
            in this VSE's secret object that have not been saved to the Vault.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.VSE_Save">
            <summary>
            Saves this secret to the Vault.  Returns True on Success
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.VSE_SaveNew">
            <summary>
            Saves this secret to the Vault.  It will succeed only if this is the First time this secret has ever been saved.
            <para>Only applies to secret that are stored in Engines using Check And Set</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.VSE_SaveUpdate">
            <summary>
            Saves this secret to the Vault.  It will succeed only if the version of the secret in Vault matches the Version property on this
            Object.  If someone else has saved an updated version since the time you last read it, you will need to re-read it and then try
            your save again.
            <para>Only applies to secret that are stored in Engines using Check And Set</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.VSE_Exists">
            <summary>
            Returns True if a VSE with this name and path, already exist in the Vault.  False if it does not Exist.
            <para>If you are going to end up reading the Vault Entry anyway, then it is more efficient to use VSE_Read instead.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.VSE_Delete">
            <summary>
            Deletes this secret's current version from the Vault
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.VSE_Info">
            <summary>
            Performs a read of the Vault Secret's MetaData Information which mostly provides version information about the secret, including
            Current Version, Max # of versions it keeps, the oldest version and timestamp information about each of the versions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.VSE_DestroyAll">
            <summary>
            Completely Destroys this secret from the Vault.  All Versions are removed as though it never existed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.VSE_Destroy">
            <summary>
            Destroys the given version of the secret, resulting in the complete removal of all evidence THIS VERSION of the secret ever existed in the vault
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.VSE_SaveAs(System.String,System.String,VaultAgent.SecretEngines.KV2SecretEngine)">
            <summary>
            Allows the Saving of this secret under a new name and path.
            </summary>
            <param name="name"></param>
            <param name="path"></param>
            <param name="secretEngine"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.GetIntAttributeNullable(System.String)">
            <summary>
            Retrieves the attributeName from the Attributes List.  If it does not exist of if the value is not a number (including empty string) then null is returned.  Otherwise the integer is returned
            </summary>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.GetIntAttributeDefault(System.String)">
            <summary>
            Retrieves the attributeName from the Attributes List.  If it does not exist or if the value is not a number (including empty string) then 0 is returned.  Otherwise the integer is returned.
            </summary>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.SetIntAttribute(System.String,System.Int32)">
            <summary>
            Saves the given integer value into the Attributes List under the provided AttributeName
            </summary>
            <param name="attributeName">Name of the Attribute to save the value under</param>
            <param name="value">The value to be stored</param>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.SetDateTimeOffsetAttribute(System.String,System.DateTimeOffset)">
            <summary>
            Saves the given DateTimeOffset value into the Attributes List under the provided AttributeName
            </summary>
            <param name="attributeName">Name of the Attribute to save the value under</param>
            <param name="value">The value to be stored</param>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.GetDateTimeOffsetAttributeDefault(System.String)">
            <summary>
            Retrieves the attributeName from the Attributes List.  If it does not exist or if the value is not a number (including empty string) then DateTimeOffset.MinValue is returned.  Otherwise the integer is returned.
            </summary>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryBase.GetDateTimeOffsetAttributeNullable(System.String)">
            <summary>
            Retrieves the attributeName from the Attributes List.  If it does not exist or if the value is not a number (including empty string) then null is returned.  Otherwise the integer is returned.
            </summary>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns></returns>
        </member>
        <member name="T:VaultAgent.SecretEngines.VaultSecretEntryCAS">
            <summary>
            Represents a "Smart" Vault Secret (KV2Secret) for KV2 Secret Engines that require Check And Set Functionality when saving secrets.
            While all of the functionality exposed by this class can be done with a combination of the
            KV2SecretEngine and the KV2SecretBase objects, it puts that functionality into a single class, that makes for much less lines of code and a
            much easier to work with functionality when it comes to moving a KV2Secret's information to and from the Vault.
            <para>The main add is a set of VSE_ methods that enable the reading, saving, deleting, getting info on the secret you are working with</para>
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryCAS.#ctor">
            <summary>
            Constructor a VaultSecretEntry object that supports the Vault Check And Set Operations
            </summary>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryCAS.#ctor(VaultAgent.SecretEngines.KV2SecretEngine)">
            <summary>
            Constructor a VaultSecretEntry object that supports the Vault Check And Set Operations
            </summary>
            <param name="secretEngine">The KV2SecretEngine that this secret should operate with</param>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryCAS.#ctor(VaultAgent.SecretEngines.KV2SecretEngine,System.String,System.String)">
            <summary>
            Constructor a VaultSecretEntry object that supports the Vault Check And Set Operations
            </summary>
            <param name="secretEngine">The KV2SecretEngine that this secret should operate with</param>
            <param name="name">The Name of this secret</param>
            <param name="path">The Path of this secret</param>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryCAS.VSE_SaveNew">
            <summary>
            Saves the secret to the Vault if it has never existed in the Vault before.  Use SaveUpdate for updates
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.SecretEngines.VaultSecretEntryCAS.VSE_SaveUpdate">
            <summary>
            Saves the secret to the Vault, using a Check and Set operation.  This means the version of the secret currently saved in Vault
            must be the same as the version we are trying to save now.  If they are the same, then the save is allowed, and the version on
            this object is incremented to match the Vault version.
            <para>If it fails, then you may need to re-read the secret from the Vault, apply your changes and then save.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:VaultAgent.VaultAgentAPI">
             <summary>
             The VaultAgentAPI is the main connector between an application and a Vault Instance.  It provides a number of different types of backends that can be accessed thru it.
             There are 2 general categories of backends -
               - Authentication backends - which utilize an external 3rd party system to validate credentials.  Once validated a token is provided for all further access.
               - Secret backends - These are used to store secrets.
             An important concept is that the Token stored by this object is used by all of its backends.  This means anytime the token is changed all subsequent calls to the Vault
             will utilize that new token value.  Typically it is expected you will only need to supply or get a token (via an authentication methods login method) once.   But be aware
             that privilege escalation could happen if you change the token from its initial value.  It is generally best that if you need to work with multiple token values in Vault
             that you create multiple VaultAgentAPI objects for each one.
            
             It establishes a connection to the requested Vault Instance using the supplied
             Token value.  It automatically establishes a connection to the Vault Instance upon initial construction of the object.  It can also optionally connect to the system
             backend during construction if requested to do so AND the supplied token has permission.
             The typical usage scenario is that a calling program uses this object to establish a connection to the Vault Instance and then requests attachment to one or more
             authorization or secret backends which it then uses to communicate to the Vault Store with.
             </summary>
        </member>
        <member name="M:VaultAgent.VaultAgentAPI.#ctor(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Constructor to create a new VaultAgentAPI object which is used to connect to a single Vault Instance.  Automatically connects to the Token Backend and will optionally connect
            to system backend if requested.
            <para>Will Throw ApplicationException if unable to establish a connection to the backend vault server.</para>
            </summary>
            <param name="name">The name this Vault Instance should be known by.  This is purely cosmetic and serves no functional purpose other than being able to uniquely identify this Vault Instance from another.</param>
            <param name="port">The network port the Vault instance is listening on.</param>
            <param name="vaultIP">The IP address of the Vault instance you want to connect to.</param>
            <param name="tokenID">The token to be used to perform actions against the Vault instance with.  If not supplied now, it will need to be supplied before any actions (other
            than an authentication backend login method will work.</param>
            <param name="connectSystemBackend">Set to true to connect the system backend. The supplied token must have permission to connect to the system backend or else this will fail.</param>
        </member>
        <member name="P:VaultAgent.VaultAgentAPI.Name">
            <summary>
            The name this Vault Instance is known by.  This is purely cosmetic and serves no functional purpose other than being able to uniquely identify this Vault Instance from another.
            </summary>
        </member>
        <member name="P:VaultAgent.VaultAgentAPI.IP">
            <summary>
            The IP Address of the vault instance.  
            </summary>
        </member>
        <member name="P:VaultAgent.VaultAgentAPI.Port">
            <summary>
            The IP port the Vault instance is listening on.
            </summary>
        </member>
        <member name="P:VaultAgent.VaultAgentAPI.Token">
            <summary>
            The Security Token used to perform actions in the Vault Instance.
            Note:  This token's information (TTL, ExpireTime and NumberOfUses) will get stale over time.
            You should call RefreshActiveToken if you need to see its Current TTL, ExpireTime or NumberOfUses left values.
            </summary>
        </member>
        <member name="P:VaultAgent.VaultAgentAPI.System">
            <summary>
            Provides access to the Vault Core System Backend which provides access to mount new engines/backends and manipulate the main Vault Store.
            </summary>
        </member>
        <member name="M:VaultAgent.VaultAgentAPI.ConnectToSecretBackend(VaultAgent.Backends.System.EnumSecretBackendTypes,System.String,System.String)">
            <summary>
            Establishes a connection to the desired Vault Secret backend at the specified vault MountPath.  The backend mount must already exist.
            </summary>
            <param name="secretBackendType">The type of backend you wish to connect to.</param>
            <param name="backendName">The name you wish to refer to this backend by.  This is NOT the Vault mount path.</param>
            <param name="backendMountPath">The path to the vault mount point that this backend is located at.</param>
            <returns>True if it was able to successfully connect to the backend.  False if it encountered an error.</returns>
        </member>
        <member name="M:VaultAgent.VaultAgentAPI.CreateSecretBackendMount(VaultAgent.Backends.System.EnumSecretBackendTypes,System.String,System.String,System.String,VaultAgent.Backends.System.VaultSysMountConfig)">
            <summary>
            Creates a secret backend of the specified type at the specified mount path.  Upon completion it establishes a connection to the backend.
            </summary>
            <param name="secretBackendType">The type of backend you wish to connect to.</param>
            <param name="backendName">The name you wish to refer to this backend by.  This is NOT the Vault mount path.</param>
            <param name="backendMountPath">The path to the vault mount point that this backend is located at.</param>
            <param name="description">Description for the backend</param>
            <param name="config">(Optional) A VaultSysMountConfig object that contains the connection configuration you wish to use to connect to the backend.  If not specified defaults will be used.</param>
            <returns>True if it was able to create the backend and connect to it.  False if it encountered an error.</returns>
        </member>
        <member name="M:VaultAgent.VaultAgentAPI.ConnectAuthenticationBackend(VaultAgent.Backends.EnumBackendTypes,System.String,System.String)">
            <summary>
            Connects to the specified Authentication backend.
            </summary>
            <param name="backendType">The type of backend to connect</param>
            <param name="backendName">Name of the backend</param>
            <param name="backendMountPath">Mount path to the backend.</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultAgentAPI.ConnectAuthenticationBackend(VaultAgent.Backends.EnumBackendTypes)">
            <summary>
            Connects the specified Authentication backend at its default Vault Path
            </summary>
            <param name="backendType"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultAgentAPI.RefreshActiveToken">
            <summary>
            Retrieves the latest information for the Token currently being used to access Vault with from the Vault Token Database.  While the entire token is refreshed, this practically means
            that the following properties are updated:  NumberOfUses, TTL, ExpireTime.  Returns a Token object on success and Null on failure.
            </summary>
            <returns>Token if successfull.  Null if unsuccessful</returns>
        </member>
        <member name="M:VaultAgent.VaultAgentAPI.RevokeActiveToken">
            <summary>
            Revokes the token currently being used to access Vault.  No further access with this token will be permitted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultAgentAPI.RenewActiveToken">
            <summary>
            Renews the current token.  Returns a refreshed copy of the token or Null if the renewal failed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VaultAgent.VaultAPI_Http">
            <summary>
            This class represents the HTTP connection object for the Vault Agent Interface.  It handles all the connections to Vault Instance as well as all error handling.
            </summary>
        </member>
        <member name="M:VaultAgent.VaultAPI_Http.#ctor(System.String,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="vaultIP">IP Address of the Vault server</param>
            <param name="port">The network Port the Vault server is listening on</param>
        </member>
        <member name="M:VaultAgent.VaultAPI_Http.SetTokenHeader(System.String)">
            <summary>
            Sets the Vault Access token used to access Vault with.  This should be called by the VaultAgent any time the token changes.
            </summary>
            <param name="tokenID"></param>
        </member>
        <member name="M:VaultAgent.VaultAPI_Http.PostAsync_B(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Post Method
            </summary>
            <param name="APIPath">The path in Vault</param>
            <param name="callingRoutineName">Name of the calling routine</param>
            <param name="inputParams">Dictionary of string, string input parameters</param>
            <param name="expectReturnToHaveBody">Set to True if you expect the return object to have a body</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultAPI_Http.PostAsync_B(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Post Method
            </summary>
            <param name="APIPath">The path in Vault</param>
            <param name="callingRoutineName">Name of the calling routine</param>
            <param name="inputParams">Dictionary of string,object input parameters</param>
            <param name="expectReturnToHaveBody">Set to True if you expect the return object to have a body</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultAPI_Http.PostAsync_B(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Calls the HTTP Post method, to send data to the Vault API server.
            This is the updated version.
            </summary>
            <param name="APIPath">The path to call on the Vault server.</param>
            <param name="callingRoutineName">String name of the routine that called this method.  Used for debugging and logging purposes only.</param>
            <param name="inputParamsJSON">JSON string of the parameters you want to put in the body of the HTTP call.  This is used to override the inputParams Dictionary.</param>
            <param name="expectReturnToHaveBody">Set to true to optimize the call by not retrieving the body from the response because it is not needed or expected to be empty.</param>
            <returns>VaultDataResponseObject with the results of the call.</returns>
        </member>
        <member name="M:VaultAgent.VaultAPI_Http.PutAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Calls the HTTP PUT method, to send data to the Vault API server.  
            </summary>
            <param name="APIPath">The path to call on the Vault server.</param>
            <param name="callingRoutineName">String name of the routine that called this method.  Used for debugging and logging purposes only.</param>
            <param name="inputParams">A Dictionary of key value pairs of parameters that should be sent in the body of the HTTP Call.  Should set to null if overriding 
            with your own JSON string of parameters by setting the inputParamsJSON</param>
            <param name="inputParamsJSON">JSON string of the parameters you want to put in the body of the HTTP call.  This is used to override the inputParams Dictionary.</param>
            <returns>VaultDataResponseObject with the results of the call.</returns>
        </member>
        <member name="M:VaultAgent.VaultAPI_Http.GetAsync_B(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Retrieves data from the Vault.
            </summary>
            <param name="APIPath">Path to the vault method you wish to execute.</param>
            <param name="callingRoutineName">Name of routine that is calling us - used during error reporting.</param>
            <param name="sendParameters">The parameters to send to the API method.</param>
            <returns>A VaultDataResponseObject containing the return data or error codes.</returns>
        </member>
        <member name="M:VaultAgent.VaultAPI_Http.DeleteAsync(System.String,System.String)">
            <summary>
            Performs an HTTP Delete operation.
            </summary>
            <param name="APIPath">The Vault path to call to perform a deletion on.</param>
            <param name="callingRoutineName">Routine that called this function</param>
            <returns>VaultDateResponseObject of the results of the operation.</returns>
        </member>
        <member name="M:VaultAgent.VaultAPI_Http.HandleVaultErrors(System.Net.Http.HttpResponseMessage,System.String,System.String)">
            <summary>
            Processes errors returned by calls to the Vault API.  This will throw a new Error in all cases.
            </summary>
            <param name="response">The actual HttpResponseMessage returned by the HTTP call.</param>
            <param name="vaultHttpPath">The path that we tried to run on the Vault API.</param>
            <param name="callingRoutineName">The name of the routine that was making the Vault API Call.</param>
            <returns>A thrown exception with a custom message detailing the errors returned by the vault API.  </returns>
        </member>
        <member name="M:VaultAgent.VaultAPI_Http.ConvertJSONArrayToList(System.String,System.String)">
            <summary>
            Returns a specific field of the given JSON object.
            To return a given field of a sub key use the . format.  
              Example 
              - Return the data field:   data
              - Return the id field of the data element:   data.id
            </summary>
            <param name="json">The JSON string to parse</param>
            <param name="fieldName">The specific field or subfield you want JSON for in dot notation.  field.subfield.subsubfield....</param>
            <returns>JSON representation of the specified field.</returns>
        </member>
        <member name="T:VaultAgent.VaultBackend">
            <summary>
            Represents the Abstract elements of a Vault Backend Object
            </summary>
        </member>
        <member name="F:VaultAgent.VaultBackend._parent">
            <summary>
            The Vault Agent API object that this Backend will use to talk to Vault.  
            </summary>
        </member>
        <member name="M:VaultAgent.VaultBackend.#ctor(System.String,System.String,VaultAgent.VaultAgentAPI,System.String)">
            <summary>
            Constructor for the Backend.  
            </summary>
            <param name="name">The name used to identify this backend, this is not the mount point!</param>
            <param name="mountPoint">The name of the mount point in vault to connect to.</param>
            <param name="vaultAgentAPI">This is the Vault Agent API object that contains Connection info to the Vault.
            It should also contain a Token that has the necessary permissions to do the Backend Tasks</param>
            <param name="mountPointPrefix">If the path is prefixed in vault with some value, specify it here.  It defaults to /v1/ which is typical Vault default value.</param>
        </member>
        <member name="P:VaultAgent.VaultBackend.Name">
            <summary>
            The cosmetic name to be used to identify the backend.  This is not used internally in Vault.
            </summary>
        </member>
        <member name="P:VaultAgent.VaultBackend.MountPoint">
            <summary>
            The "name" of the mount point in Vault for the backend.  This must be exact and capitalization matters.  This is the Name as far as Vault is concerned.
            </summary>
        </member>
        <member name="P:VaultAgent.VaultBackend.MountPointPath">
            <summary>
            The mount path is the exact path in Vault to get to the specific mount Point.  Usually it is /v1/(MountPoint)/
            </summary>
        </member>
        <member name="P:VaultAgent.VaultBackend.MountPointPrefix">
            <summary>
            The Mount Point prefix of the Backend
            </summary>
        </member>
        <member name="P:VaultAgent.VaultBackend.Type">
            <summary>
            The exact type of backend this is.  All Authentication backends start with A_.
            </summary>
        </member>
        <member name="P:VaultAgent.VaultBackend.IsAuthenticationBackend">
            <summary>
            True if this backend is an Authentication Backend.
            </summary>
        </member>
        <member name="P:VaultAgent.VaultBackend.IsSecretBackend">
            <summary>
            True if this backend is a Secret backend.
            </summary>
        </member>
        <member name="T:VaultAgent.VaultDataResponseObjectB">
            <summary>
            The VaultDataResponseObject serves as the intermediary between an HTTP response and methods that need to make HTTP calls.
            </summary>
        </member>
        <member name="P:VaultAgent.VaultDataResponseObjectB.HttpStatusCode">
            <summary>
            The Status code returned from the Vault API Call.
            </summary>
        </member>
        <member name="P:VaultAgent.VaultDataResponseObjectB.Success">
            <summary>
            Whether the API Call was successful or not.
            </summary>
        </member>
        <member name="M:VaultAgent.VaultDataResponseObjectB.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Creates a Vault Data Response Object that expects to return some data in the body of the HTTP message.  
            </summary>
            <param name="httpResponseMessage">The Http response message that will allow us to retrieve the body of the
            HTTP call.</param>
        </member>
        <member name="M:VaultAgent.VaultDataResponseObjectB.#ctor(System.Net.HttpStatusCode)">
            <summary>
            Constructor that should be used when there is expected to be no contents in the Body of the HTTP call.  Basically we
            just need to know whether the call worked or not.
            </summary>
            <param name="statusCode"></param>
        </member>
        <member name="M:VaultAgent.VaultDataResponseObjectB.AsyncReadResponse">
            <summary>
            Reads the response from the HTTP call as a stream asynchronously and places into a JObject. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultDataResponseObjectB.GetDotNetObject``1(System.String)">
            <summary>
            Retrieves the specified object from the response.    If the response was empty it will throw an ArgumentNullException
            </summary>
            <typeparam name="T">Type of object that you are retrieving</typeparam>
            <param name="key">Allows you to pick a specific subpart of the JSON to retrieve an object from.  To specify multiple levels
            you separate with a period.  So data.keys will create an object from whatever the keys json field contains.
            <para>should be specified as all lower case.</para></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultDataResponseObjectB.GetJSON(System.String)">
            <summary>
            Returns the Response from Vault as a JSON string.
            </summary>
            <param name="key">Allows you to pick a specific subpart of the JSON to retrieve an object from.  To specify multiple levels
            you separate with a period.  So data.keys will create an object from whatever the keys json field contains.
            <para>should be specified as all lower case.</para></param>
            <returns></returns>
        </member>
        <member name="T:VaultAgent.EnumVaultExceptionCodes">
            <summary>
            Used to specifically identify certain Vault Errors as to the exact cause or reason.
            </summary>
        </member>
        <member name="F:VaultAgent.EnumVaultExceptionCodes.UnclassifiedError">
            <summary>
            The default value for all VaultExceptions.  Indicates we have not classified the error any more specifically than what Vault provided.
            </summary>
        </member>
        <member name="F:VaultAgent.EnumVaultExceptionCodes.BackendMountAlreadyExists">
            <summary>
            Indicates that there is already a backend mounted at the specified location.
            </summary>
        </member>
        <member name="F:VaultAgent.EnumVaultExceptionCodes.ObjectDoesNotExist">
            <summary>
            The object cannot be found
            </summary>
        </member>
        <member name="F:VaultAgent.EnumVaultExceptionCodes.LoginRoleID_NotFound">
            <summary>
            Indicates that login failed because the login RoleID was invalid.
            </summary>
        </member>
        <member name="F:VaultAgent.EnumVaultExceptionCodes.LoginSecretID_NotFound">
            <summary>
            Indicates that the login failed because the login SecretID supplied is not valid.
            </summary>
        </member>
        <member name="F:VaultAgent.EnumVaultExceptionCodes.CheckAndSetMissing">
            <summary>
            The Check and Set (CAS) parameter was missing.  This is required on some KV2 keystores depending on config.
            </summary>
        </member>
        <member name="F:VaultAgent.EnumVaultExceptionCodes.CAS_VersionMissing">
            <summary>
            The Check and Set (CAS) secret version was missing OR the secret already exists, but was told it should only save if it does not exist.
            </summary>
        </member>
        <member name="F:VaultAgent.EnumVaultExceptionCodes.CAS_SecretExistsAlready">
            <summary>
            The Check and Set (CAS) is set and User requested that the Save only happen if the secret does not already exist.  Secret exists and so this error.
            </summary>
        </member>
        <member name="F:VaultAgent.EnumVaultExceptionCodes.PermissionDenied">
            <summary>
            Indicates a token does not have permission to a specific path.
            </summary>
        </member>
        <member name="F:VaultAgent.EnumVaultExceptionCodes.LDAPLoginServerConnectionIssue">
            <summary>
            Problems connecting to the LDAP server, check name, protocol, ports, tls, etc
            </summary>
        </member>
        <member name="F:VaultAgent.EnumVaultExceptionCodes.LDAPLoginCredentialsFailure">
            <summary>
            Invalid username or password supplied for LDAP Login
            </summary>
        </member>
        <member name="T:VaultAgent.VaultCustomException">
            <summary>
            Represents a Vault Custom Exception
            </summary>
        </member>
        <member name="P:VaultAgent.VaultCustomException.SpecificErrorCode">
            <summary>
            The specific Exception Code returned by Vault
            </summary>
        </member>
        <member name="M:VaultAgent.VaultCustomException.#ctor">
            <summary>
            Constructor for a Custom Vault Exception
            </summary>
        </member>
        <member name="M:VaultAgent.VaultCustomException.#ctor(System.String)">
            <summary>
            Constructor for a custom Vault Exception
            </summary>
            <param name="message">Message to be stored with the Exception</param>
        </member>
        <member name="M:VaultAgent.VaultCustomException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for a custom Vault Exception
            </summary>
            <param name="message">Message to be stored with the Exception</param>
            <param name="innerException">The original Exception if this was triggered by another error</param>
        </member>
        <member name="M:VaultAgent.VaultCustomException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Allows Serializing of the exception
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:VaultAgent.VaultException">
            <summary>
            Represents a generic unclassified VaultException
            </summary>
        </member>
        <member name="P:VaultAgent.VaultException.SpecificErrorCode">
            <summary>
            The specific Exception Code returned by Vault
            </summary>
        </member>
        <member name="M:VaultAgent.VaultException.#ctor">
            <summary>
            Constructor for a Generic Unclassified Vault Exception
            </summary>
        </member>
        <member name="M:VaultAgent.VaultException.#ctor(System.String)">
            <summary>
            Constructor for a Generic Unclassified Vault Exception
            </summary>
            <param name="message">Message to be stored with the Exception</param>
        </member>
        <member name="M:VaultAgent.VaultException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for a Generic Unclassified Vault Exception
            </summary>
            <param name="message">Message to be stored with the Exception</param>
            <param name="innerException">The original Exception if this was triggered by another error</param>
        </member>
        <member name="M:VaultAgent.VaultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializer for the VaultException Class
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:VaultAgent.VaultFieldNotFoundException">
            <summary>
            Represents a Vault Error that indicates a field was not found
            </summary>
        </member>
        <member name="P:VaultAgent.VaultFieldNotFoundException.SpecificErrorCode">
            <summary>
            The specific Exception Code returned by Vault
            </summary>
        </member>
        <member name="M:VaultAgent.VaultFieldNotFoundException.#ctor">
            <summary>
            Constructor for a Vault Field Not Found Exception
            </summary>
        </member>
        <member name="M:VaultAgent.VaultFieldNotFoundException.#ctor(System.String)">
            <summary>
            Constructor for a Vault Field Not Found Exception
            <param name="message">Message to be stored with the Exception</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultFieldNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for a Vault Field Not Found Exception
            <param name="message">Message to be stored with the Exception</param>
            <param name="innerException">The original Exception if this was triggered by another error</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultFieldNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializer for Vault Field Not Found Exception
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:VaultAgent.VaultInvalidDataException">
            <summary>
            Represents A Vault Error that indicates that the provided data was incorrect, improperly formatted or some other type of Data related issue
            </summary>
        </member>
        <member name="P:VaultAgent.VaultInvalidDataException.SpecificErrorCode">
            <summary>
            The specific Exception Code returned by Vault
            </summary>
        </member>
        <member name="M:VaultAgent.VaultInvalidDataException.#ctor">
            <summary>
            Constructor for a Vault Invalid Data Exception
            </summary>
        </member>
        <member name="M:VaultAgent.VaultInvalidDataException.#ctor(System.String)">
            <summary>
            Constructor for a Vault Invalid Data Exception
            <param name="message">Message to be stored with the Exception</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultInvalidDataException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for a Vault Invalid Data Exception
            <param name="message">Message to be stored with the Exception</param>
            <param name="innerException">The original Exception if this was triggered by another error</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultInvalidDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializer
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:VaultAgent.VaultForbiddenException">
            <summary>
            Vault Forbidden Exception.  Authentication details may be incorrect.  or Permission or CORS request issue is going on.
            </summary>
        </member>
        <member name="P:VaultAgent.VaultForbiddenException.SpecificErrorCode">
            <summary>
            The specific Exception Code returned by Vault
            </summary>
        </member>
        <member name="M:VaultAgent.VaultForbiddenException.#ctor">
            <summary>
            Constructor for a Vault Forbidden Exception which usually indicates a permission error, but sometimes is thrown if a path just does not exist.
            </summary>
        </member>
        <member name="M:VaultAgent.VaultForbiddenException.#ctor(System.String)">
            <summary>
            Constructor for a Vault Forbidden Exception which usually indicates a permission error, but sometimes is thrown if a path just does not exist.
            <param name="message">Message to be stored with the Exception</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultForbiddenException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for a Vault Forbidden Exception which usually indicates a permission error, but sometimes is thrown if a path just does not exist.
            <param name="message">Message to be stored with the Exception</param>
            <param name="innerException">The original Exception if this was triggered by another error</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultForbiddenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializer
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:VaultAgent.VaultInvalidPathException">
            <summary>
            There was an issue with the Path provided to the Vault Methods.  Either the caller does not have permission or the path may not exist.
            </summary>
        </member>
        <member name="P:VaultAgent.VaultInvalidPathException.SpecificErrorCode">
            <summary>
            The specific Exception Code returned by Vault
            </summary>
        </member>
        <member name="M:VaultAgent.VaultInvalidPathException.#ctor">
            <summary>
            Constructor for a Vault Invalid Path Exception which usually indicates a permission error, but sometimes is thrown if a path just does not exist.
            </summary>
        </member>
        <member name="M:VaultAgent.VaultInvalidPathException.#ctor(System.String)">
            <summary>
            Constructor for a Vault Invalid Path Exception which usually indicates a permission error, but sometimes is thrown if a path just does not exist.
            <param name="message">Message to be stored with the Exception</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultInvalidPathException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for a Vault Invalid Path Exception which usually indicates a permission error, but sometimes is thrown if a path just does not exist.
            <param name="message">Message to be stored with the Exception</param>
            <param name="innerException">The original Exception if this was triggered by another error</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultInvalidPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:VaultAgent.VaultInternalErrorException">
            <summary>
            There was an internal error detected in Vault
            </summary>
        </member>
        <member name="P:VaultAgent.VaultInternalErrorException.SpecificErrorCode">
            <summary>
            The specific Exception Code returned by Vault
            </summary>
        </member>
        <member name="M:VaultAgent.VaultInternalErrorException.#ctor">
            <summary>
            Constructor for a Vault Internal Error Exception which usually indicates sometype of issue with the Vault System.
            </summary>
        </member>
        <member name="M:VaultAgent.VaultInternalErrorException.#ctor(System.String)">
            <summary>
            Constructor for a Vault Internal Error Exception which usually indicates sometype of issue with the Vault System.
            <param name="message">Message to be stored with the Exception</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultInternalErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for a Vault Internal Error Exception which usually indicates sometype of issue with the Vault System.
            <param name="message">Message to be stored with the Exception</param>
            <param name="innerException">The original Exception if this was triggered by another error</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultInternalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializer
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:VaultAgent.VaultStandbyNodesErrorException">
            <summary>
            There is an error with the Vault Standby Nodes
            </summary>
        </member>
        <member name="M:VaultAgent.VaultStandbyNodesErrorException.#ctor">
            <summary>
            Constructor for a Vault StandBy Nodes Exception
            </summary>
        </member>
        <member name="M:VaultAgent.VaultStandbyNodesErrorException.#ctor(System.String)">
            <summary>
            Constructor for a Vault StandBy Nodes Exception
            <param name="message">Message to be stored with the Exception</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultStandbyNodesErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for a Vault StandBy Nodes Exception
            <param name="message">Message to be stored with the Exception</param>
            <param name="innerException">The original Exception if this was triggered by another error</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultStandbyNodesErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializer
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:VaultAgent.VaultSealedException">
            <summary>
            The Vault is Sealed
            </summary>
        </member>
        <member name="M:VaultAgent.VaultSealedException.#ctor">
            <summary>
            Constructor for a Vault Sealed Exception
            </summary>
        </member>
        <member name="M:VaultAgent.VaultSealedException.#ctor(System.String)">
            <summary>
            Constructor for a Vault StandBy Nodes Exception
            <param name="message">Message to be stored with the Exception</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultSealedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for a Vault Sealed Exception
            <param name="message">Message to be stored with the Exception</param>
            <param name="innerException">The original Exception if this was triggered by another error</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultSealedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializer
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:VaultAgent.VaultSealedException.#ctor(System.Exception)">
            <summary>
            Constructor for a Vault Sealed Exception
            <param name="innerException">The original Exception if this was triggered by another error</param>
            </summary>
        </member>
        <member name="T:VaultAgent.VaultUnexpectedCodePathException">
            <summary>
            An Unexpected Vault Code Path was executed
            </summary>
        </member>
        <member name="M:VaultAgent.VaultUnexpectedCodePathException.#ctor">
            <summary>
            Constructor for a Vault Unexpected Code Path Error
            </summary>
        </member>
        <member name="M:VaultAgent.VaultUnexpectedCodePathException.#ctor(System.String)">
            <summary>
            Constructor for a Vault Unexpected Code Path Error
            <param name="message">Message to be stored with the Exception</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultUnexpectedCodePathException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for a Vault Unexpected Code Path Error
            <param name="message">Message to be stored with the Exception</param>
            <param name="innerException">The original Exception if this was triggered by another error</param>
            </summary>
        </member>
        <member name="M:VaultAgent.VaultUnexpectedCodePathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializer
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:VaultAgent.VaultSerializationHelper">
            <summary>
            NewtonSoft JSON Serialization settings for all of Vault
            </summary>
        </member>
        <member name="F:VaultAgent.VaultSerializationHelper.serializationSettings">
            <summary>
            Serialization Settings
            </summary>
        </member>
        <member name="M:VaultAgent.VaultSerializationHelper.FromJson``1(System.String)">
            <summary>
            Deserializes a JSON string into a C# object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultSerializationHelper.ToJson``1(``0)">
            <summary>
            Universal Serializer for JSON
            universal method for serialization to json
            this "this" keyword means, its "extension method"
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:VaultAgent.VaultUtilityFX">
            <summary>
            Various Utility Functions Needed by the Library
            </summary>
        </member>
        <member name="M:VaultAgent.VaultUtilityFX.ConvertUnixTimeStamp(System.String)">
            <summary>
            Converts a time from Unix Timestamp into .Net Datetime
            </summary>
            <param name="unixTimeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultUtilityFX.ConvertUnixTimeStamp(System.Int64)">
            <summary>
            Converts a DateTime into a Unix TimeStamp
            </summary>
            <param name="unixTimeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultUtilityFX.Base64EncodeAscii(System.String)">
            <summary>
            Encodes an Ascii value into Base64
            </summary>
            <param name="textToEncode">Ascii text to be encoded</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultUtilityFX.Base64DecodeAscii(System.String)">
            <summary>
            Decodes a Base64 value into an Ascii string
            </summary>
            <param name="textToDecode">The Base64 text to decode into Ascii</param>
            <returns></returns>
        </member>
        <member name="M:VaultAgent.VaultUtilityFX.ConvertJSON``1(System.String)">
            <summary>
            This function accepts a JSON string and will convert it into a strongly typed C# class object.  
            Especially useful for converting JSON objects that are sub arrays or sub lists into C# Lists or Dictionaries.
            Example:  JSON:  { Keys: {"1": 144, "2": 54, "3": 98}
            </summary>
            <typeparam name="T">The C# class type to convert the JSON into. </typeparam>
            <param name="json">The JSON string that should be converted.</param>
            <returns>The C# class type to be returned filled with the JSON values.</returns>
        </member>
    </members>
</doc>

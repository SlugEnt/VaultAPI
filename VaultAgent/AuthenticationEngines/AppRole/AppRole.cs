using System;
using System.Collections.Generic;
using Newtonsoft.Json;



namespace VaultAgent.AuthenticationEngines
{
	/// <summary>
	/// Represents a Vault AppRole.
	/// 
	/// An "AppRole" represents a set of Vault policies and login constraints that must be met to receive a token with those policies. 
	/// The scope can be as narrow or broad as desired. An AppRole can be created for a particular machine, or even a particular user on that machine, 
	/// or a service spread across machines. The credentials required for successful login depend upon the constraints set on the AppRole associated with the credentials.
	/// </summary>
	public class AppRole
	{
		private string _name;
		private bool _enableLocalSecretIDs = false;


	    /// <summary>
	    /// Creates an AppRole object with the specified name.  Number of uses is set to unlimited AND a Secret ID is required to login.
	    /// </summary>
	    /// <param name="name">Name to be given to the App Role.  It will be converted to Lower Case, since Vault only deals with lower case.</param>
	    public AppRole (string name) {
	        _name = name.ToLower();
	        IsSecretIDRequiredOnLogin = true;
	        NumberOfUses = 0;
	        SecretNumberOfUses = 0;
	    }

	    /// <summary>
		/// Creates an empty Vault AppRole object
		/// </summary>
		[JsonConstructor]
		public AppRole () { }


	    /// <summary>
		/// The name of the App Role.
		/// </summary>
		[JsonProperty("role_name")]
		public string Name {
			get { return _name; }
			set { _name = value.ToLower(); }
		}


	    /// <summary>
		/// Determines whether the secret ID is required when logging in with this App Role.
		/// Default: True (Secret ID is required)
		/// </summary>
		[JsonProperty("bind_secret_id")]
		public bool IsSecretIDRequiredOnLogin { get; set; }



		//TODO:  This is now deprecated.  Replaced with secret_id_bound_cidrs.  https://www.vaultproject.io/api/auth/approle/index.html
		/// <summary>
		/// Comma-separated string or list of CIDR blocks; if set, specifies blocks of IP addresses which can perform the login operation.
		/// </summary>
		[Obsolete]
		[JsonProperty("bound_cidr_list")]
		public List<string> BoundCIDRList { get; set; }



		/// <summary>
		/// Comma-separated string or list of CIDR blocks; if set, specifies blocks of IP addresses which can use the auth tokens generated by this role.
		/// </summary>
		[JsonProperty("token_bound_cidrs")]
		public List<string> TokenBoundCIDRList { get; set; }



		/// <summary>
		/// List of policy name strings that apply to the tokens issued by this AppRole.
		/// </summary>
		[JsonProperty("policies")]
		public List<string> Policies { get; set; }



		/// <summary>
		///  Number of times any particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. A value of zero will allow unlimited uses.
		///  Default: 0 (Unlimited use)
		/// </summary>
		[JsonProperty("secret_id_num_uses")]
		public int SecretNumberOfUses { get; set; }



		/// <summary>
		/// Duration in either an integer number of seconds (3600) or an integer time unit (60m) after which any SecretID expires.
		/// </summary>
		[JsonProperty("secret_id_ttl")]
		public string SecretTTL { get; set; }



		/// <summary>
		/// Number of times issued tokens can be used. A value of 0 means unlimited uses.
		/// </summary>
		[JsonProperty("token_num_uses")]
		public int NumberOfUses { get; set; }



		/// <summary>
		/// Duration in either an integer number of seconds (3600) or an integer time unit (60m) to set as the TTL for issued tokens and at renewal time.
		/// </summary>
		[JsonProperty("token_ttl")]
		public string TokenTTL { get; set; }



		/// <summary>
		/// Duration in either an integer number of seconds (3600) or an integer time unit (60m) after which the issued token can no longer be renewed.
		/// </summary>
		[JsonProperty("token_max_ttl")]
		public string TokenMaxTTL { get; set; }



		/// <summary>
		/// Duration in either an integer number of seconds (3600) or an integer time unit (60m). 
		/// If set, the token generated using this AppRole is a periodic token; so long as it is renewed it never expires, 
		/// but the TTL set on the token at each renewal is fixed to the value specified here. 
		/// If this value is modified, the token will pick up the new value at its next renewal.
		/// </summary>
		[JsonProperty("period")]
		public string Period { get; set; }



		//TODO - new property needs to be added to unit tests.
		/// <summary>
		/// If set, the secret IDs generated using this role will be cluster local. This can only be set during role creation and once set, it can't be reset later.
		/// Defaults to False.
		/// </summary>
		[JsonProperty("enable_local_secret_ids")]
		public bool EnableLocalSecretIDs { 
			get { return _enableLocalSecretIDs; }
			set {
				if (value == true) { throw new NotImplementedException("EnableLocalSecretIDs is not enabled in Vault at this time.  It is hardcoded to false."); }
				_enableLocalSecretIDs = value;
				}
		}

	}
}
